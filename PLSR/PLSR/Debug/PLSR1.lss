
PLSR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800100  00001444  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  008002a0  008002a0  00001678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006263  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001468  00000000  00000000  00007c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c6a  00000000  00000000  000090e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a3c  00000000  00000000  0000ad50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e6f  00000000  00000000  0000b78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045b5  00000000  00000000  0000d5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00011bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	aa 02       	muls	r26, r26

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e4 e4       	ldi	r30, 0x44	; 68
      d8:	f4 e1       	ldi	r31, 0x14	; 20
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a0 3a       	cpi	r26, 0xA0	; 160
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	22 e0       	ldi	r18, 0x02	; 2
      e8:	a0 ea       	ldi	r26, 0xA0	; 160
      ea:	b2 e0       	ldi	r27, 0x02	; 2
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a3 3c       	cpi	r26, 0xC3	; 195
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <main>
     110:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z14renderMainMenuv>:

//Index of time that user choose
int index = 0;

void renderMainMenu(){
	lcd.clear();
     118:	82 ea       	ldi	r24, 0xA2	; 162
     11a:	92 e0       	ldi	r25, 0x02	; 2
     11c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(5,1);
     120:	41 e0       	ldi	r20, 0x01	; 1
     122:	65 e0       	ldi	r22, 0x05	; 5
     124:	82 ea       	ldi	r24, 0xA2	; 162
     126:	92 e0       	ldi	r25, 0x02	; 2
     128:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Time:");
     12c:	65 e5       	ldi	r22, 0x55	; 85
     12e:	72 e0       	ldi	r23, 0x02	; 2
     130:	82 ea       	ldi	r24, 0xA2	; 162
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5printEPKc>
	lcd.setCursor(6,2);
     138:	42 e0       	ldi	r20, 0x02	; 2
     13a:	66 e0       	ldi	r22, 0x06	; 6
     13c:	82 ea       	ldi	r24, 0xA2	; 162
     13e:	92 e0       	ldi	r25, 0x02	; 2
     140:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(timeList[index]);
     144:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     148:	f0 91 a1 02 	lds	r31, 0x02A1	; 0x8002a1 <__data_end+0x1>
     14c:	ee 0f       	add	r30, r30
     14e:	ff 1f       	adc	r31, r31
     150:	ee 0f       	add	r30, r30
     152:	ff 1f       	adc	r31, r31
     154:	ee 5f       	subi	r30, 0xFE	; 254
     156:	fe 4f       	sbci	r31, 0xFE	; 254
     158:	40 81       	ld	r20, Z
     15a:	51 81       	ldd	r21, Z+1	; 0x01
     15c:	62 81       	ldd	r22, Z+2	; 0x02
     15e:	73 81       	ldd	r23, Z+3	; 0x03
     160:	22 e0       	ldi	r18, 0x02	; 2
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	82 ea       	ldi	r24, 0xA2	; 162
     166:	92 e0       	ldi	r25, 0x02	; 2
     168:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_ZN5Print5printEdi>

0000016c <setup>:
//Prototypes of methods
void renderMainMenu();

void setup() {
	//Initialize I/O
	pinMode(BTN1,INPUT);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	8e e0       	ldi	r24, 0x0E	; 14
     170:	0e 94 af 07 	call	0xf5e	; 0xf5e <pinMode>
	pinMode(BTN2,INPUT);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	8f e0       	ldi	r24, 0x0F	; 15
     178:	0e 94 af 07 	call	0xf5e	; 0xf5e <pinMode>
	pinMode(BTN3,INPUT);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	80 e1       	ldi	r24, 0x10	; 16
     180:	0e 94 af 07 	call	0xf5e	; 0xf5e <pinMode>
	pinMode(RELAY,OUTPUT);
     184:	61 e0       	ldi	r22, 0x01	; 1
     186:	81 e1       	ldi	r24, 0x11	; 17
     188:	0e 94 af 07 	call	0xf5e	; 0xf5e <pinMode>
	digitalWrite(RELAY,1);
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	81 e1       	ldi	r24, 0x11	; 17
     190:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
	
	lcd.begin(16, 4);
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	44 e0       	ldi	r20, 0x04	; 4
     198:	60 e1       	ldi	r22, 0x10	; 16
     19a:	82 ea       	ldi	r24, 0xA2	; 162
     19c:	92 e0       	ldi	r25, 0x02	; 2
     19e:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN13LiquidCrystal5beginEhhh>
	lcd.print("PLSR V1.0");
	delay(2000);
	lcd.clear();
	#endif
	
	renderMainMenu();
     1a2:	0c 94 8c 00 	jmp	0x118	; 0x118 <_Z14renderMainMenuv>

000001a6 <_Z7waitForibi>:
}

/************************************************************************/
/* Wait and measure time until logic change to specified logic level    */
/************************************************************************/
int waitFor(int btn,bool logic,int timeout){
     1a6:	8f 92       	push	r8
     1a8:	9f 92       	push	r9
     1aa:	af 92       	push	r10
     1ac:	bf 92       	push	r11
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	18 2f       	mov	r17, r24
     1be:	ea 01       	movw	r28, r20
	long timeStart = millis();
     1c0:	0e 94 d3 06 	call	0xda6	; 0xda6 <millis>
     1c4:	6b 01       	movw	r12, r22
     1c6:	7c 01       	movw	r14, r24
	while(digitalRead(btn) && (millis() - timeStart) < timeout);
     1c8:	4e 01       	movw	r8, r28
     1ca:	0d 2e       	mov	r0, r29
     1cc:	00 0c       	add	r0, r0
     1ce:	aa 08       	sbc	r10, r10
     1d0:	bb 08       	sbc	r11, r11
     1d2:	81 2f       	mov	r24, r17
     1d4:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     1d8:	89 2b       	or	r24, r25
     1da:	69 f0       	breq	.+26     	; 0x1f6 <_Z7waitForibi+0x50>
     1dc:	0e 94 d3 06 	call	0xda6	; 0xda6 <millis>
     1e0:	dc 01       	movw	r26, r24
     1e2:	cb 01       	movw	r24, r22
     1e4:	8c 19       	sub	r24, r12
     1e6:	9d 09       	sbc	r25, r13
     1e8:	ae 09       	sbc	r26, r14
     1ea:	bf 09       	sbc	r27, r15
     1ec:	88 15       	cp	r24, r8
     1ee:	99 05       	cpc	r25, r9
     1f0:	aa 05       	cpc	r26, r10
     1f2:	bb 05       	cpc	r27, r11
     1f4:	70 f3       	brcs	.-36     	; 0x1d2 <_Z7waitForibi+0x2c>
	int output = millis() - timeStart;
     1f6:	0e 94 d3 06 	call	0xda6	; 0xda6 <millis>
     1fa:	6c 19       	sub	r22, r12
     1fc:	7d 09       	sbc	r23, r13
	if(output >= timeout) return -1;
     1fe:	6c 17       	cp	r22, r28
     200:	7d 07       	cpc	r23, r29
     202:	1c f0       	brlt	.+6      	; 0x20a <_Z7waitForibi+0x64>
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	9f ef       	ldi	r25, 0xFF	; 255
     208:	01 c0       	rjmp	.+2      	; 0x20c <_Z7waitForibi+0x66>
     20a:	cb 01       	movw	r24, r22
	return output;
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	9f 90       	pop	r9
     220:	8f 90       	pop	r8
     222:	08 95       	ret

00000224 <_Z12handleButtonib>:

/************************************************************************/
/*                          Handle left/right                           */
/************************************************************************/
void handleButton(int btn,boolean increase){
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	c8 2f       	mov	r28, r24
     22c:	19 2f       	mov	r17, r25
     22e:	d6 2f       	mov	r29, r22
	if(digitalRead(btn)){
     230:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     234:	89 2b       	or	r24, r25
     236:	09 f4       	brne	.+2      	; 0x23a <_Z12handleButtonib+0x16>
     238:	4e c0       	rjmp	.+156    	; 0x2d6 <_Z12handleButtonib+0xb2>
		int time = waitFor(btn,LOW,1000);
     23a:	48 ee       	ldi	r20, 0xE8	; 232
     23c:	53 e0       	ldi	r21, 0x03	; 3
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	8c 2f       	mov	r24, r28
     242:	91 2f       	mov	r25, r17
     244:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z7waitForibi>
		if(time == -1){
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	39 f5       	brne	.+78     	; 0x29a <_Z12handleButtonib+0x76>
     24c:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end>
     250:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <__data_end+0x1>
			do
			{
				if(!increase && index > 0) index--;
     254:	d1 11       	cpse	r29, r1
     256:	05 c0       	rjmp	.+10     	; 0x262 <_Z12handleButtonib+0x3e>
     258:	18 16       	cp	r1, r24
     25a:	19 06       	cpc	r1, r25
     25c:	84 f4       	brge	.+32     	; 0x27e <_Z12handleButtonib+0x5a>
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	0a c0       	rjmp	.+20     	; 0x276 <_Z12handleButtonib+0x52>
				if(increase && index <(timeListSize - 1)) index++;
     262:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     266:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	31 09       	sbc	r19, r1
     26e:	82 17       	cp	r24, r18
     270:	93 07       	cpc	r25, r19
     272:	28 f4       	brcc	.+10     	; 0x27e <_Z12handleButtonib+0x5a>
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <__data_end+0x1>
     27a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
				renderMainMenu();
     27e:	0e 94 8c 00 	call	0x118	; 0x118 <_Z14renderMainMenuv>
				delay(100);
     282:	64 e6       	ldi	r22, 0x64	; 100
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 04 07 	call	0xe08	; 0xe08 <delay>
			}
			while (digitalRead(btn));
     28e:	8c 2f       	mov	r24, r28
     290:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
/************************************************************************/
void handleButton(int btn,boolean increase){
	if(digitalRead(btn)){
		int time = waitFor(btn,LOW,1000);
		if(time == -1){
			do
     294:	89 2b       	or	r24, r25
     296:	d1 f6       	brne	.-76     	; 0x24c <_Z12handleButtonib+0x28>
     298:	1e c0       	rjmp	.+60     	; 0x2d6 <_Z12handleButtonib+0xb2>
     29a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end>
     29e:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <__data_end+0x1>
				delay(100);
			}
			while (digitalRead(btn));
		}
		else{
			if(!increase && index > 0) index--;
     2a2:	d1 11       	cpse	r29, r1
     2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <_Z12handleButtonib+0x8c>
     2a6:	18 16       	cp	r1, r24
     2a8:	19 06       	cpc	r1, r25
     2aa:	84 f4       	brge	.+32     	; 0x2cc <_Z12handleButtonib+0xa8>
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	0a c0       	rjmp	.+20     	; 0x2c4 <_Z12handleButtonib+0xa0>
			if(increase && index <(timeListSize - 1)) index++;
     2b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     2b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     2b8:	21 50       	subi	r18, 0x01	; 1
     2ba:	31 09       	sbc	r19, r1
     2bc:	82 17       	cp	r24, r18
     2be:	93 07       	cpc	r25, r19
     2c0:	28 f4       	brcc	.+10     	; 0x2cc <_Z12handleButtonib+0xa8>
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <__data_end+0x1>
     2c8:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
			renderMainMenu();
		}
		
	}
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
			while (digitalRead(btn));
		}
		else{
			if(!increase && index > 0) index--;
			if(increase && index <(timeListSize - 1)) index++;
			renderMainMenu();
     2d2:	0c 94 8c 00 	jmp	0x118	; 0x118 <_Z14renderMainMenuv>
		}
		
	}
}
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	08 95       	ret

000002de <loop>:

/************************************************************************/
/*                             Main loop                                */
/************************************************************************/
void loop() {
     2de:	4f 92       	push	r4
     2e0:	5f 92       	push	r5
     2e2:	6f 92       	push	r6
     2e4:	7f 92       	push	r7
     2e6:	8f 92       	push	r8
     2e8:	9f 92       	push	r9
     2ea:	af 92       	push	r10
     2ec:	bf 92       	push	r11
     2ee:	cf 92       	push	r12
     2f0:	df 92       	push	r13
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
	handleButton(BTN1,false);
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	8e e0       	ldi	r24, 0x0E	; 14
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 12 01 	call	0x224	; 0x224 <_Z12handleButtonib>
	handleButton(BTN3,true);
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	80 e1       	ldi	r24, 0x10	; 16
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 12 01 	call	0x224	; 0x224 <_Z12handleButtonib>
	
	if(digitalRead(BTN2)){
     30e:	8f e0       	ldi	r24, 0x0F	; 15
     310:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     314:	89 2b       	or	r24, r25
     316:	09 f4       	brne	.+2      	; 0x31a <loop+0x3c>
     318:	0e c1       	rjmp	.+540    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
		while(digitalRead(BTN2));
     31a:	8f e0       	ldi	r24, 0x0F	; 15
     31c:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     320:	89 2b       	or	r24, r25
     322:	d9 f7       	brne	.-10     	; 0x31a <loop+0x3c>
		long timeStart = millis();
     324:	0e 94 d3 06 	call	0xda6	; 0xda6 <millis>
     328:	6b 01       	movw	r12, r22
     32a:	7c 01       	movw	r14, r24
		
		//Turn relay on
		digitalWrite(RELAY,0);
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	81 e1       	ldi	r24, 0x11	; 17
     330:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
		
		lcd.clear();
     334:	82 ea       	ldi	r24, 0xA2	; 162
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(3,1);
     33c:	41 e0       	ldi	r20, 0x01	; 1
     33e:	63 e0       	ldi	r22, 0x03	; 3
     340:	82 ea       	ldi	r24, 0xA2	; 162
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("Exposing...");
     348:	6b e5       	ldi	r22, 0x5B	; 91
     34a:	72 e0       	ldi	r23, 0x02	; 2
     34c:	82 ea       	ldi	r24, 0xA2	; 162
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5printEPKc>
				return;
			}
			else{
				//No cancel request, continue display exposing status
				long timePassed = (millis() - timeStart);
				if(timePassed % 100 == 0){
     354:	94 e6       	ldi	r25, 0x64	; 100
     356:	89 2e       	mov	r8, r25
     358:	91 2c       	mov	r9, r1
     35a:	a1 2c       	mov	r10, r1
     35c:	b1 2c       	mov	r11, r1
		
		lcd.clear();
		lcd.setCursor(3,1);
		lcd.print("Exposing...");
		
		while((millis() - timeStart) <= (timeList[index] * 1000)){
     35e:	0e 94 d3 06 	call	0xda6	; 0xda6 <millis>
     362:	6c 19       	sub	r22, r12
     364:	7d 09       	sbc	r23, r13
     366:	8e 09       	sbc	r24, r14
     368:	9f 09       	sbc	r25, r15
     36a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatunsisf>
     36e:	2b 01       	movw	r4, r22
     370:	3c 01       	movw	r6, r24
     372:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     376:	f0 91 a1 02 	lds	r31, 0x02A1	; 0x8002a1 <__data_end+0x1>
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	ee 5f       	subi	r30, 0xFE	; 254
     384:	fe 4f       	sbci	r31, 0xFE	; 254
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	4a e7       	ldi	r20, 0x7A	; 122
     38c:	54 e4       	ldi	r21, 0x44	; 68
     38e:	60 81       	ld	r22, Z
     390:	71 81       	ldd	r23, Z+1	; 0x01
     392:	82 81       	ldd	r24, Z+2	; 0x02
     394:	93 81       	ldd	r25, Z+3	; 0x03
     396:	0e 94 82 04 	call	0x904	; 0x904 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	c3 01       	movw	r24, r6
     3a0:	b2 01       	movw	r22, r4
     3a2:	0e 94 2a 03 	call	0x654	; 0x654 <__cmpsf2>
     3a6:	18 16       	cp	r1, r24
     3a8:	0c f4       	brge	.+2      	; 0x3ac <loop+0xce>
     3aa:	56 c0       	rjmp	.+172    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			
			if(digitalRead(BTN1) && digitalRead(BTN3)){
     3ac:	8e e0       	ldi	r24, 0x0E	; 14
     3ae:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     3b2:	89 2b       	or	r24, r25
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <loop+0xda>
     3b6:	73 c0       	rjmp	.+230    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3b8:	80 e1       	ldi	r24, 0x10	; 16
     3ba:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     3be:	89 2b       	or	r24, r25
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <loop+0xe6>
     3c2:	6d c0       	rjmp	.+218    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				//Check if user tries to cancel
				digitalWrite(RELAY,1);
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	81 e1       	ldi	r24, 0x11	; 17
     3c8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
				lcd.setCursor(3,1);
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	63 e0       	ldi	r22, 0x03	; 3
     3d0:	82 ea       	ldi	r24, 0xA2	; 162
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print("           ");
     3d8:	67 e6       	ldi	r22, 0x67	; 103
     3da:	72 e0       	ldi	r23, 0x02	; 2
     3dc:	82 ea       	ldi	r24, 0xA2	; 162
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5printEPKc>
				lcd.setCursor(3,1);
     3e4:	41 e0       	ldi	r20, 0x01	; 1
     3e6:	63 e0       	ldi	r22, 0x03	; 3
     3e8:	82 ea       	ldi	r24, 0xA2	; 162
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print("Canceled!");
     3f0:	6b e7       	ldi	r22, 0x7B	; 123
     3f2:	72 e0       	ldi	r23, 0x02	; 2
     3f4:	82 ea       	ldi	r24, 0xA2	; 162
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5printEPKc>
				delay(500);
     3fc:	64 ef       	ldi	r22, 0xF4	; 244
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 04 07 	call	0xe08	; 0xe08 <delay>
     408:	ce ee       	ldi	r28, 0xEE	; 238
     40a:	d2 e0       	ldi	r29, 0x02	; 2
				
				//Check if user tries to skip "Canceled" page
				for(int i =0; i < 1500 ;i+=2){
					delay(2);
     40c:	62 e0       	ldi	r22, 0x02	; 2
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 04 07 	call	0xe08	; 0xe08 <delay>
					if(digitalRead(BTN1) || digitalRead(BTN2) || digitalRead(BTN3)) break;
     418:	8e e0       	ldi	r24, 0x0E	; 14
     41a:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     41e:	89 2b       	or	r24, r25
     420:	59 f4       	brne	.+22     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     422:	8f e0       	ldi	r24, 0x0F	; 15
     424:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     428:	89 2b       	or	r24, r25
     42a:	31 f4       	brne	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     42c:	80 e1       	ldi	r24, 0x10	; 16
     42e:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     432:	89 2b       	or	r24, r25
     434:	09 f4       	brne	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	6b c0       	rjmp	.+214    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
				}
				while(digitalRead(BTN1) || digitalRead(BTN2) || digitalRead(BTN3)); //Wait for all buttons to release
     438:	8e e0       	ldi	r24, 0x0E	; 14
     43a:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     43e:	89 2b       	or	r24, r25
     440:	d9 f7       	brne	.-10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     442:	8f e0       	ldi	r24, 0x0F	; 15
     444:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     448:	89 2b       	or	r24, r25
     44a:	b1 f7       	brne	.-20     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     44c:	80 e1       	ldi	r24, 0x10	; 16
     44e:	0e 94 1a 08 	call	0x1034	; 0x1034 <digitalRead>
     452:	89 2b       	or	r24, r25
     454:	89 f7       	brne	.-30     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     456:	5f c0       	rjmp	.+190    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
					//Print number in format #.#
					lcd.print((float) ((millis() - timeStart) / 1000.0), 1);
				}
			}
		}
		digitalWrite(RELAY,1);
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	81 e1       	ldi	r24, 0x11	; 17
     45c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
		
		lcd.setCursor(3,1);
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	63 e0       	ldi	r22, 0x03	; 3
     464:	82 ea       	ldi	r24, 0xA2	; 162
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("           ");
     46c:	67 e6       	ldi	r22, 0x67	; 103
     46e:	72 e0       	ldi	r23, 0x02	; 2
     470:	82 ea       	ldi	r24, 0xA2	; 162
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5printEPKc>
		lcd.setCursor(3,1);
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	63 e0       	ldi	r22, 0x03	; 3
     47c:	82 ea       	ldi	r24, 0xA2	; 162
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("  DONE!");
     484:	63 e7       	ldi	r22, 0x73	; 115
     486:	72 e0       	ldi	r23, 0x02	; 2
     488:	82 ea       	ldi	r24, 0xA2	; 162
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5printEPKc>
		
		delay(1000);
     490:	68 ee       	ldi	r22, 0xE8	; 232
     492:	73 e0       	ldi	r23, 0x03	; 3
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 04 07 	call	0xe08	; 0xe08 <delay>
     49c:	3c c0       	rjmp	.+120    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
				renderMainMenu();
				return;
			}
			else{
				//No cancel request, continue display exposing status
				long timePassed = (millis() - timeStart);
     49e:	0e 94 d3 06 	call	0xda6	; 0xda6 <millis>
				if(timePassed % 100 == 0){
     4a2:	6c 19       	sub	r22, r12
     4a4:	7d 09       	sbc	r23, r13
     4a6:	8e 09       	sbc	r24, r14
     4a8:	9f 09       	sbc	r25, r15
     4aa:	a5 01       	movw	r20, r10
     4ac:	94 01       	movw	r18, r8
     4ae:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__divmodsi4>
     4b2:	67 2b       	or	r22, r23
     4b4:	68 2b       	or	r22, r24
     4b6:	69 2b       	or	r22, r25
     4b8:	09 f0       	breq	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	51 cf       	rjmp	.-350    	; 0x35e <loop+0x80>
					lcd.setCursor(6,2);
     4bc:	42 e0       	ldi	r20, 0x02	; 2
     4be:	66 e0       	ldi	r22, 0x06	; 6
     4c0:	82 ea       	ldi	r24, 0xA2	; 162
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
					lcd.print("          ");
     4c8:	68 e6       	ldi	r22, 0x68	; 104
     4ca:	72 e0       	ldi	r23, 0x02	; 2
     4cc:	82 ea       	ldi	r24, 0xA2	; 162
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN5Print5printEPKc>
					lcd.setCursor(6,2);
     4d4:	42 e0       	ldi	r20, 0x02	; 2
     4d6:	66 e0       	ldi	r22, 0x06	; 6
     4d8:	82 ea       	ldi	r24, 0xA2	; 162
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN13LiquidCrystal9setCursorEhh>
					
					//Print number in format #.#
					lcd.print((float) ((millis() - timeStart) / 1000.0), 1);
     4e0:	0e 94 d3 06 	call	0xda6	; 0xda6 <millis>
     4e4:	6c 19       	sub	r22, r12
     4e6:	7d 09       	sbc	r23, r13
     4e8:	8e 09       	sbc	r24, r14
     4ea:	9f 09       	sbc	r25, r15
     4ec:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatunsisf>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	4a e7       	ldi	r20, 0x7A	; 122
     4f6:	54 e4       	ldi	r21, 0x44	; 68
     4f8:	0e 94 2f 03 	call	0x65e	; 0x65e <__divsf3>
     4fc:	ab 01       	movw	r20, r22
     4fe:	bc 01       	movw	r22, r24
     500:	21 e0       	ldi	r18, 0x01	; 1
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	82 ea       	ldi	r24, 0xA2	; 162
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN5Print5printEdi>
     50c:	28 cf       	rjmp	.-432    	; 0x35e <loop+0x80>
     50e:	21 97       	sbiw	r28, 0x01	; 1
				lcd.setCursor(3,1);
				lcd.print("Canceled!");
				delay(500);
				
				//Check if user tries to skip "Canceled" page
				for(int i =0; i < 1500 ;i+=2){
     510:	09 f0       	breq	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     512:	7c cf       	rjmp	.-264    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     514:	91 cf       	rjmp	.-222    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		delay(1000);
		
		renderMainMenu();
		
	}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	df 90       	pop	r13
     520:	cf 90       	pop	r12
     522:	bf 90       	pop	r11
     524:	af 90       	pop	r10
     526:	9f 90       	pop	r9
     528:	8f 90       	pop	r8
     52a:	7f 90       	pop	r7
     52c:	6f 90       	pop	r6
     52e:	5f 90       	pop	r5
     530:	4f 90       	pop	r4
					delay(2);
					if(digitalRead(BTN1) || digitalRead(BTN2) || digitalRead(BTN3)) break;
				}
				while(digitalRead(BTN1) || digitalRead(BTN2) || digitalRead(BTN3)); //Wait for all buttons to release
				
				renderMainMenu();
     532:	0c 94 8c 00 	jmp	0x118	; 0x118 <_Z14renderMainMenuv>
		delay(1000);
		
		renderMainMenu();
		
	}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	bf 90       	pop	r11
     544:	af 90       	pop	r10
     546:	9f 90       	pop	r9
     548:	8f 90       	pop	r8
     54a:	7f 90       	pop	r7
     54c:	6f 90       	pop	r6
     54e:	5f 90       	pop	r5
     550:	4f 90       	pop	r4
     552:	08 95       	ret

00000554 <_GLOBAL__sub_I__Z7float2sfj>:
     554:	cf 92       	push	r12
     556:	ef 92       	push	r14
     558:	0f 93       	push	r16
#include <LiquidCrystal.h>
#include <float2s.h>



LiquidCrystal lcd(2, 3, 4, 5, 6, 7);
     55a:	87 e0       	ldi	r24, 0x07	; 7
     55c:	c8 2e       	mov	r12, r24
     55e:	96 e0       	ldi	r25, 0x06	; 6
     560:	e9 2e       	mov	r14, r25
     562:	05 e0       	ldi	r16, 0x05	; 5
     564:	24 e0       	ldi	r18, 0x04	; 4
     566:	43 e0       	ldi	r20, 0x03	; 3
     568:	62 e0       	ldi	r22, 0x02	; 2
     56a:	82 ea       	ldi	r24, 0xA2	; 162
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN13LiquidCrystalC1Ehhhhhh>
		delay(1000);
		
		renderMainMenu();
		
	}
     572:	0f 91       	pop	r16
     574:	ef 90       	pop	r14
     576:	cf 90       	pop	r12
     578:	08 95       	ret

0000057a <__subsf3>:
     57a:	50 58       	subi	r21, 0x80	; 128

0000057c <__addsf3>:
     57c:	bb 27       	eor	r27, r27
     57e:	aa 27       	eor	r26, r26
     580:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__addsf3x>
     584:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_round>
     588:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_pscA>
     58c:	38 f0       	brcs	.+14     	; 0x59c <__addsf3+0x20>
     58e:	0e 94 41 04 	call	0x882	; 0x882 <__fp_pscB>
     592:	20 f0       	brcs	.+8      	; 0x59c <__addsf3+0x20>
     594:	39 f4       	brne	.+14     	; 0x5a4 <__addsf3+0x28>
     596:	9f 3f       	cpi	r25, 0xFF	; 255
     598:	19 f4       	brne	.+6      	; 0x5a0 <__addsf3+0x24>
     59a:	26 f4       	brtc	.+8      	; 0x5a4 <__addsf3+0x28>
     59c:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_nan>
     5a0:	0e f4       	brtc	.+2      	; 0x5a4 <__addsf3+0x28>
     5a2:	e0 95       	com	r30
     5a4:	e7 fb       	bst	r30, 7
     5a6:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_inf>

000005aa <__addsf3x>:
     5aa:	e9 2f       	mov	r30, r25
     5ac:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_split3>
     5b0:	58 f3       	brcs	.-42     	; 0x588 <__addsf3+0xc>
     5b2:	ba 17       	cp	r27, r26
     5b4:	62 07       	cpc	r22, r18
     5b6:	73 07       	cpc	r23, r19
     5b8:	84 07       	cpc	r24, r20
     5ba:	95 07       	cpc	r25, r21
     5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__addsf3x+0x1c>
     5be:	79 f4       	brne	.+30     	; 0x5de <__addsf3x+0x34>
     5c0:	a6 f5       	brtc	.+104    	; 0x62a <__addsf3x+0x80>
     5c2:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_zero>
     5c6:	0e f4       	brtc	.+2      	; 0x5ca <__addsf3x+0x20>
     5c8:	e0 95       	com	r30
     5ca:	0b 2e       	mov	r0, r27
     5cc:	ba 2f       	mov	r27, r26
     5ce:	a0 2d       	mov	r26, r0
     5d0:	0b 01       	movw	r0, r22
     5d2:	b9 01       	movw	r22, r18
     5d4:	90 01       	movw	r18, r0
     5d6:	0c 01       	movw	r0, r24
     5d8:	ca 01       	movw	r24, r20
     5da:	a0 01       	movw	r20, r0
     5dc:	11 24       	eor	r1, r1
     5de:	ff 27       	eor	r31, r31
     5e0:	59 1b       	sub	r21, r25
     5e2:	99 f0       	breq	.+38     	; 0x60a <__addsf3x+0x60>
     5e4:	59 3f       	cpi	r21, 0xF9	; 249
     5e6:	50 f4       	brcc	.+20     	; 0x5fc <__addsf3x+0x52>
     5e8:	50 3e       	cpi	r21, 0xE0	; 224
     5ea:	68 f1       	brcs	.+90     	; 0x646 <__addsf3x+0x9c>
     5ec:	1a 16       	cp	r1, r26
     5ee:	f0 40       	sbci	r31, 0x00	; 0
     5f0:	a2 2f       	mov	r26, r18
     5f2:	23 2f       	mov	r18, r19
     5f4:	34 2f       	mov	r19, r20
     5f6:	44 27       	eor	r20, r20
     5f8:	58 5f       	subi	r21, 0xF8	; 248
     5fa:	f3 cf       	rjmp	.-26     	; 0x5e2 <__addsf3x+0x38>
     5fc:	46 95       	lsr	r20
     5fe:	37 95       	ror	r19
     600:	27 95       	ror	r18
     602:	a7 95       	ror	r26
     604:	f0 40       	sbci	r31, 0x00	; 0
     606:	53 95       	inc	r21
     608:	c9 f7       	brne	.-14     	; 0x5fc <__addsf3x+0x52>
     60a:	7e f4       	brtc	.+30     	; 0x62a <__addsf3x+0x80>
     60c:	1f 16       	cp	r1, r31
     60e:	ba 0b       	sbc	r27, r26
     610:	62 0b       	sbc	r22, r18
     612:	73 0b       	sbc	r23, r19
     614:	84 0b       	sbc	r24, r20
     616:	ba f0       	brmi	.+46     	; 0x646 <__addsf3x+0x9c>
     618:	91 50       	subi	r25, 0x01	; 1
     61a:	a1 f0       	breq	.+40     	; 0x644 <__addsf3x+0x9a>
     61c:	ff 0f       	add	r31, r31
     61e:	bb 1f       	adc	r27, r27
     620:	66 1f       	adc	r22, r22
     622:	77 1f       	adc	r23, r23
     624:	88 1f       	adc	r24, r24
     626:	c2 f7       	brpl	.-16     	; 0x618 <__addsf3x+0x6e>
     628:	0e c0       	rjmp	.+28     	; 0x646 <__addsf3x+0x9c>
     62a:	ba 0f       	add	r27, r26
     62c:	62 1f       	adc	r22, r18
     62e:	73 1f       	adc	r23, r19
     630:	84 1f       	adc	r24, r20
     632:	48 f4       	brcc	.+18     	; 0x646 <__addsf3x+0x9c>
     634:	87 95       	ror	r24
     636:	77 95       	ror	r23
     638:	67 95       	ror	r22
     63a:	b7 95       	ror	r27
     63c:	f7 95       	ror	r31
     63e:	9e 3f       	cpi	r25, 0xFE	; 254
     640:	08 f0       	brcs	.+2      	; 0x644 <__addsf3x+0x9a>
     642:	b0 cf       	rjmp	.-160    	; 0x5a4 <__addsf3+0x28>
     644:	93 95       	inc	r25
     646:	88 0f       	add	r24, r24
     648:	08 f0       	brcs	.+2      	; 0x64c <__addsf3x+0xa2>
     64a:	99 27       	eor	r25, r25
     64c:	ee 0f       	add	r30, r30
     64e:	97 95       	ror	r25
     650:	87 95       	ror	r24
     652:	08 95       	ret

00000654 <__cmpsf2>:
     654:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_cmp>
     658:	08 f4       	brcc	.+2      	; 0x65c <__cmpsf2+0x8>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret

0000065e <__divsf3>:
     65e:	0e 94 43 03 	call	0x686	; 0x686 <__divsf3x>
     662:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_round>
     666:	0e 94 41 04 	call	0x882	; 0x882 <__fp_pscB>
     66a:	58 f0       	brcs	.+22     	; 0x682 <__divsf3+0x24>
     66c:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_pscA>
     670:	40 f0       	brcs	.+16     	; 0x682 <__divsf3+0x24>
     672:	29 f4       	brne	.+10     	; 0x67e <__divsf3+0x20>
     674:	5f 3f       	cpi	r21, 0xFF	; 255
     676:	29 f0       	breq	.+10     	; 0x682 <__divsf3+0x24>
     678:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_inf>
     67c:	51 11       	cpse	r21, r1
     67e:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_szero>
     682:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_nan>

00000686 <__divsf3x>:
     686:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_split3>
     68a:	68 f3       	brcs	.-38     	; 0x666 <__divsf3+0x8>

0000068c <__divsf3_pse>:
     68c:	99 23       	and	r25, r25
     68e:	b1 f3       	breq	.-20     	; 0x67c <__divsf3+0x1e>
     690:	55 23       	and	r21, r21
     692:	91 f3       	breq	.-28     	; 0x678 <__divsf3+0x1a>
     694:	95 1b       	sub	r25, r21
     696:	55 0b       	sbc	r21, r21
     698:	bb 27       	eor	r27, r27
     69a:	aa 27       	eor	r26, r26
     69c:	62 17       	cp	r22, r18
     69e:	73 07       	cpc	r23, r19
     6a0:	84 07       	cpc	r24, r20
     6a2:	38 f0       	brcs	.+14     	; 0x6b2 <__divsf3_pse+0x26>
     6a4:	9f 5f       	subi	r25, 0xFF	; 255
     6a6:	5f 4f       	sbci	r21, 0xFF	; 255
     6a8:	22 0f       	add	r18, r18
     6aa:	33 1f       	adc	r19, r19
     6ac:	44 1f       	adc	r20, r20
     6ae:	aa 1f       	adc	r26, r26
     6b0:	a9 f3       	breq	.-22     	; 0x69c <__divsf3_pse+0x10>
     6b2:	35 d0       	rcall	.+106    	; 0x71e <__divsf3_pse+0x92>
     6b4:	0e 2e       	mov	r0, r30
     6b6:	3a f0       	brmi	.+14     	; 0x6c6 <__divsf3_pse+0x3a>
     6b8:	e0 e8       	ldi	r30, 0x80	; 128
     6ba:	32 d0       	rcall	.+100    	; 0x720 <__divsf3_pse+0x94>
     6bc:	91 50       	subi	r25, 0x01	; 1
     6be:	50 40       	sbci	r21, 0x00	; 0
     6c0:	e6 95       	lsr	r30
     6c2:	00 1c       	adc	r0, r0
     6c4:	ca f7       	brpl	.-14     	; 0x6b8 <__divsf3_pse+0x2c>
     6c6:	2b d0       	rcall	.+86     	; 0x71e <__divsf3_pse+0x92>
     6c8:	fe 2f       	mov	r31, r30
     6ca:	29 d0       	rcall	.+82     	; 0x71e <__divsf3_pse+0x92>
     6cc:	66 0f       	add	r22, r22
     6ce:	77 1f       	adc	r23, r23
     6d0:	88 1f       	adc	r24, r24
     6d2:	bb 1f       	adc	r27, r27
     6d4:	26 17       	cp	r18, r22
     6d6:	37 07       	cpc	r19, r23
     6d8:	48 07       	cpc	r20, r24
     6da:	ab 07       	cpc	r26, r27
     6dc:	b0 e8       	ldi	r27, 0x80	; 128
     6de:	09 f0       	breq	.+2      	; 0x6e2 <__divsf3_pse+0x56>
     6e0:	bb 0b       	sbc	r27, r27
     6e2:	80 2d       	mov	r24, r0
     6e4:	bf 01       	movw	r22, r30
     6e6:	ff 27       	eor	r31, r31
     6e8:	93 58       	subi	r25, 0x83	; 131
     6ea:	5f 4f       	sbci	r21, 0xFF	; 255
     6ec:	3a f0       	brmi	.+14     	; 0x6fc <__divsf3_pse+0x70>
     6ee:	9e 3f       	cpi	r25, 0xFE	; 254
     6f0:	51 05       	cpc	r21, r1
     6f2:	78 f0       	brcs	.+30     	; 0x712 <__divsf3_pse+0x86>
     6f4:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_inf>
     6f8:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_szero>
     6fc:	5f 3f       	cpi	r21, 0xFF	; 255
     6fe:	e4 f3       	brlt	.-8      	; 0x6f8 <__divsf3_pse+0x6c>
     700:	98 3e       	cpi	r25, 0xE8	; 232
     702:	d4 f3       	brlt	.-12     	; 0x6f8 <__divsf3_pse+0x6c>
     704:	86 95       	lsr	r24
     706:	77 95       	ror	r23
     708:	67 95       	ror	r22
     70a:	b7 95       	ror	r27
     70c:	f7 95       	ror	r31
     70e:	9f 5f       	subi	r25, 0xFF	; 255
     710:	c9 f7       	brne	.-14     	; 0x704 <__divsf3_pse+0x78>
     712:	88 0f       	add	r24, r24
     714:	91 1d       	adc	r25, r1
     716:	96 95       	lsr	r25
     718:	87 95       	ror	r24
     71a:	97 f9       	bld	r25, 7
     71c:	08 95       	ret
     71e:	e1 e0       	ldi	r30, 0x01	; 1
     720:	66 0f       	add	r22, r22
     722:	77 1f       	adc	r23, r23
     724:	88 1f       	adc	r24, r24
     726:	bb 1f       	adc	r27, r27
     728:	62 17       	cp	r22, r18
     72a:	73 07       	cpc	r23, r19
     72c:	84 07       	cpc	r24, r20
     72e:	ba 07       	cpc	r27, r26
     730:	20 f0       	brcs	.+8      	; 0x73a <__divsf3_pse+0xae>
     732:	62 1b       	sub	r22, r18
     734:	73 0b       	sbc	r23, r19
     736:	84 0b       	sbc	r24, r20
     738:	ba 0b       	sbc	r27, r26
     73a:	ee 1f       	adc	r30, r30
     73c:	88 f7       	brcc	.-30     	; 0x720 <__divsf3_pse+0x94>
     73e:	e0 95       	com	r30
     740:	08 95       	ret

00000742 <__fixunssfsi>:
     742:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_splitA>
     746:	88 f0       	brcs	.+34     	; 0x76a <__fixunssfsi+0x28>
     748:	9f 57       	subi	r25, 0x7F	; 127
     74a:	98 f0       	brcs	.+38     	; 0x772 <__fixunssfsi+0x30>
     74c:	b9 2f       	mov	r27, r25
     74e:	99 27       	eor	r25, r25
     750:	b7 51       	subi	r27, 0x17	; 23
     752:	b0 f0       	brcs	.+44     	; 0x780 <__fixunssfsi+0x3e>
     754:	e1 f0       	breq	.+56     	; 0x78e <__fixunssfsi+0x4c>
     756:	66 0f       	add	r22, r22
     758:	77 1f       	adc	r23, r23
     75a:	88 1f       	adc	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	1a f0       	brmi	.+6      	; 0x766 <__fixunssfsi+0x24>
     760:	ba 95       	dec	r27
     762:	c9 f7       	brne	.-14     	; 0x756 <__fixunssfsi+0x14>
     764:	14 c0       	rjmp	.+40     	; 0x78e <__fixunssfsi+0x4c>
     766:	b1 30       	cpi	r27, 0x01	; 1
     768:	91 f0       	breq	.+36     	; 0x78e <__fixunssfsi+0x4c>
     76a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_zero>
     76e:	b1 e0       	ldi	r27, 0x01	; 1
     770:	08 95       	ret
     772:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_zero>
     776:	67 2f       	mov	r22, r23
     778:	78 2f       	mov	r23, r24
     77a:	88 27       	eor	r24, r24
     77c:	b8 5f       	subi	r27, 0xF8	; 248
     77e:	39 f0       	breq	.+14     	; 0x78e <__fixunssfsi+0x4c>
     780:	b9 3f       	cpi	r27, 0xF9	; 249
     782:	cc f3       	brlt	.-14     	; 0x776 <__fixunssfsi+0x34>
     784:	86 95       	lsr	r24
     786:	77 95       	ror	r23
     788:	67 95       	ror	r22
     78a:	b3 95       	inc	r27
     78c:	d9 f7       	brne	.-10     	; 0x784 <__fixunssfsi+0x42>
     78e:	3e f4       	brtc	.+14     	; 0x79e <__fixunssfsi+0x5c>
     790:	90 95       	com	r25
     792:	80 95       	com	r24
     794:	70 95       	com	r23
     796:	61 95       	neg	r22
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	8f 4f       	sbci	r24, 0xFF	; 255
     79c:	9f 4f       	sbci	r25, 0xFF	; 255
     79e:	08 95       	ret

000007a0 <__floatunsisf>:
     7a0:	e8 94       	clt
     7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <__floatsisf+0x12>

000007a4 <__floatsisf>:
     7a4:	97 fb       	bst	r25, 7
     7a6:	3e f4       	brtc	.+14     	; 0x7b6 <__floatsisf+0x12>
     7a8:	90 95       	com	r25
     7aa:	80 95       	com	r24
     7ac:	70 95       	com	r23
     7ae:	61 95       	neg	r22
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	8f 4f       	sbci	r24, 0xFF	; 255
     7b4:	9f 4f       	sbci	r25, 0xFF	; 255
     7b6:	99 23       	and	r25, r25
     7b8:	a9 f0       	breq	.+42     	; 0x7e4 <__floatsisf+0x40>
     7ba:	f9 2f       	mov	r31, r25
     7bc:	96 e9       	ldi	r25, 0x96	; 150
     7be:	bb 27       	eor	r27, r27
     7c0:	93 95       	inc	r25
     7c2:	f6 95       	lsr	r31
     7c4:	87 95       	ror	r24
     7c6:	77 95       	ror	r23
     7c8:	67 95       	ror	r22
     7ca:	b7 95       	ror	r27
     7cc:	f1 11       	cpse	r31, r1
     7ce:	f8 cf       	rjmp	.-16     	; 0x7c0 <__floatsisf+0x1c>
     7d0:	fa f4       	brpl	.+62     	; 0x810 <__floatsisf+0x6c>
     7d2:	bb 0f       	add	r27, r27
     7d4:	11 f4       	brne	.+4      	; 0x7da <__floatsisf+0x36>
     7d6:	60 ff       	sbrs	r22, 0
     7d8:	1b c0       	rjmp	.+54     	; 0x810 <__floatsisf+0x6c>
     7da:	6f 5f       	subi	r22, 0xFF	; 255
     7dc:	7f 4f       	sbci	r23, 0xFF	; 255
     7de:	8f 4f       	sbci	r24, 0xFF	; 255
     7e0:	9f 4f       	sbci	r25, 0xFF	; 255
     7e2:	16 c0       	rjmp	.+44     	; 0x810 <__floatsisf+0x6c>
     7e4:	88 23       	and	r24, r24
     7e6:	11 f0       	breq	.+4      	; 0x7ec <__floatsisf+0x48>
     7e8:	96 e9       	ldi	r25, 0x96	; 150
     7ea:	11 c0       	rjmp	.+34     	; 0x80e <__floatsisf+0x6a>
     7ec:	77 23       	and	r23, r23
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <__floatsisf+0x54>
     7f0:	9e e8       	ldi	r25, 0x8E	; 142
     7f2:	87 2f       	mov	r24, r23
     7f4:	76 2f       	mov	r23, r22
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <__floatsisf+0x5e>
     7f8:	66 23       	and	r22, r22
     7fa:	71 f0       	breq	.+28     	; 0x818 <__floatsisf+0x74>
     7fc:	96 e8       	ldi	r25, 0x86	; 134
     7fe:	86 2f       	mov	r24, r22
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	2a f0       	brmi	.+10     	; 0x810 <__floatsisf+0x6c>
     806:	9a 95       	dec	r25
     808:	66 0f       	add	r22, r22
     80a:	77 1f       	adc	r23, r23
     80c:	88 1f       	adc	r24, r24
     80e:	da f7       	brpl	.-10     	; 0x806 <__floatsisf+0x62>
     810:	88 0f       	add	r24, r24
     812:	96 95       	lsr	r25
     814:	87 95       	ror	r24
     816:	97 f9       	bld	r25, 7
     818:	08 95       	ret

0000081a <__fp_cmp>:
     81a:	99 0f       	add	r25, r25
     81c:	00 08       	sbc	r0, r0
     81e:	55 0f       	add	r21, r21
     820:	aa 0b       	sbc	r26, r26
     822:	e0 e8       	ldi	r30, 0x80	; 128
     824:	fe ef       	ldi	r31, 0xFE	; 254
     826:	16 16       	cp	r1, r22
     828:	17 06       	cpc	r1, r23
     82a:	e8 07       	cpc	r30, r24
     82c:	f9 07       	cpc	r31, r25
     82e:	c0 f0       	brcs	.+48     	; 0x860 <__fp_cmp+0x46>
     830:	12 16       	cp	r1, r18
     832:	13 06       	cpc	r1, r19
     834:	e4 07       	cpc	r30, r20
     836:	f5 07       	cpc	r31, r21
     838:	98 f0       	brcs	.+38     	; 0x860 <__fp_cmp+0x46>
     83a:	62 1b       	sub	r22, r18
     83c:	73 0b       	sbc	r23, r19
     83e:	84 0b       	sbc	r24, r20
     840:	95 0b       	sbc	r25, r21
     842:	39 f4       	brne	.+14     	; 0x852 <__fp_cmp+0x38>
     844:	0a 26       	eor	r0, r26
     846:	61 f0       	breq	.+24     	; 0x860 <__fp_cmp+0x46>
     848:	23 2b       	or	r18, r19
     84a:	24 2b       	or	r18, r20
     84c:	25 2b       	or	r18, r21
     84e:	21 f4       	brne	.+8      	; 0x858 <__fp_cmp+0x3e>
     850:	08 95       	ret
     852:	0a 26       	eor	r0, r26
     854:	09 f4       	brne	.+2      	; 0x858 <__fp_cmp+0x3e>
     856:	a1 40       	sbci	r26, 0x01	; 1
     858:	a6 95       	lsr	r26
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	81 1d       	adc	r24, r1
     85e:	81 1d       	adc	r24, r1
     860:	08 95       	ret

00000862 <__fp_inf>:
     862:	97 f9       	bld	r25, 7
     864:	9f 67       	ori	r25, 0x7F	; 127
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	08 95       	ret

0000086e <__fp_nan>:
     86e:	9f ef       	ldi	r25, 0xFF	; 255
     870:	80 ec       	ldi	r24, 0xC0	; 192
     872:	08 95       	ret

00000874 <__fp_pscA>:
     874:	00 24       	eor	r0, r0
     876:	0a 94       	dec	r0
     878:	16 16       	cp	r1, r22
     87a:	17 06       	cpc	r1, r23
     87c:	18 06       	cpc	r1, r24
     87e:	09 06       	cpc	r0, r25
     880:	08 95       	ret

00000882 <__fp_pscB>:
     882:	00 24       	eor	r0, r0
     884:	0a 94       	dec	r0
     886:	12 16       	cp	r1, r18
     888:	13 06       	cpc	r1, r19
     88a:	14 06       	cpc	r1, r20
     88c:	05 06       	cpc	r0, r21
     88e:	08 95       	ret

00000890 <__fp_round>:
     890:	09 2e       	mov	r0, r25
     892:	03 94       	inc	r0
     894:	00 0c       	add	r0, r0
     896:	11 f4       	brne	.+4      	; 0x89c <__fp_round+0xc>
     898:	88 23       	and	r24, r24
     89a:	52 f0       	brmi	.+20     	; 0x8b0 <__fp_round+0x20>
     89c:	bb 0f       	add	r27, r27
     89e:	40 f4       	brcc	.+16     	; 0x8b0 <__fp_round+0x20>
     8a0:	bf 2b       	or	r27, r31
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <__fp_round+0x18>
     8a4:	60 ff       	sbrs	r22, 0
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <__fp_round+0x20>
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	8f 4f       	sbci	r24, 0xFF	; 255
     8ae:	9f 4f       	sbci	r25, 0xFF	; 255
     8b0:	08 95       	ret

000008b2 <__fp_split3>:
     8b2:	57 fd       	sbrc	r21, 7
     8b4:	90 58       	subi	r25, 0x80	; 128
     8b6:	44 0f       	add	r20, r20
     8b8:	55 1f       	adc	r21, r21
     8ba:	59 f0       	breq	.+22     	; 0x8d2 <__fp_splitA+0x10>
     8bc:	5f 3f       	cpi	r21, 0xFF	; 255
     8be:	71 f0       	breq	.+28     	; 0x8dc <__fp_splitA+0x1a>
     8c0:	47 95       	ror	r20

000008c2 <__fp_splitA>:
     8c2:	88 0f       	add	r24, r24
     8c4:	97 fb       	bst	r25, 7
     8c6:	99 1f       	adc	r25, r25
     8c8:	61 f0       	breq	.+24     	; 0x8e2 <__fp_splitA+0x20>
     8ca:	9f 3f       	cpi	r25, 0xFF	; 255
     8cc:	79 f0       	breq	.+30     	; 0x8ec <__fp_splitA+0x2a>
     8ce:	87 95       	ror	r24
     8d0:	08 95       	ret
     8d2:	12 16       	cp	r1, r18
     8d4:	13 06       	cpc	r1, r19
     8d6:	14 06       	cpc	r1, r20
     8d8:	55 1f       	adc	r21, r21
     8da:	f2 cf       	rjmp	.-28     	; 0x8c0 <__fp_split3+0xe>
     8dc:	46 95       	lsr	r20
     8de:	f1 df       	rcall	.-30     	; 0x8c2 <__fp_splitA>
     8e0:	08 c0       	rjmp	.+16     	; 0x8f2 <__fp_splitA+0x30>
     8e2:	16 16       	cp	r1, r22
     8e4:	17 06       	cpc	r1, r23
     8e6:	18 06       	cpc	r1, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	f1 cf       	rjmp	.-30     	; 0x8ce <__fp_splitA+0xc>
     8ec:	86 95       	lsr	r24
     8ee:	71 05       	cpc	r23, r1
     8f0:	61 05       	cpc	r22, r1
     8f2:	08 94       	sec
     8f4:	08 95       	ret

000008f6 <__fp_zero>:
     8f6:	e8 94       	clt

000008f8 <__fp_szero>:
     8f8:	bb 27       	eor	r27, r27
     8fa:	66 27       	eor	r22, r22
     8fc:	77 27       	eor	r23, r23
     8fe:	cb 01       	movw	r24, r22
     900:	97 f9       	bld	r25, 7
     902:	08 95       	ret

00000904 <__mulsf3>:
     904:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3x>
     908:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_round>
     90c:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_pscA>
     910:	38 f0       	brcs	.+14     	; 0x920 <__mulsf3+0x1c>
     912:	0e 94 41 04 	call	0x882	; 0x882 <__fp_pscB>
     916:	20 f0       	brcs	.+8      	; 0x920 <__mulsf3+0x1c>
     918:	95 23       	and	r25, r21
     91a:	11 f0       	breq	.+4      	; 0x920 <__mulsf3+0x1c>
     91c:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_inf>
     920:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_nan>
     924:	11 24       	eor	r1, r1
     926:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_szero>

0000092a <__mulsf3x>:
     92a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_split3>
     92e:	70 f3       	brcs	.-36     	; 0x90c <__mulsf3+0x8>

00000930 <__mulsf3_pse>:
     930:	95 9f       	mul	r25, r21
     932:	c1 f3       	breq	.-16     	; 0x924 <__mulsf3+0x20>
     934:	95 0f       	add	r25, r21
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	55 1f       	adc	r21, r21
     93a:	62 9f       	mul	r22, r18
     93c:	f0 01       	movw	r30, r0
     93e:	72 9f       	mul	r23, r18
     940:	bb 27       	eor	r27, r27
     942:	f0 0d       	add	r31, r0
     944:	b1 1d       	adc	r27, r1
     946:	63 9f       	mul	r22, r19
     948:	aa 27       	eor	r26, r26
     94a:	f0 0d       	add	r31, r0
     94c:	b1 1d       	adc	r27, r1
     94e:	aa 1f       	adc	r26, r26
     950:	64 9f       	mul	r22, r20
     952:	66 27       	eor	r22, r22
     954:	b0 0d       	add	r27, r0
     956:	a1 1d       	adc	r26, r1
     958:	66 1f       	adc	r22, r22
     95a:	82 9f       	mul	r24, r18
     95c:	22 27       	eor	r18, r18
     95e:	b0 0d       	add	r27, r0
     960:	a1 1d       	adc	r26, r1
     962:	62 1f       	adc	r22, r18
     964:	73 9f       	mul	r23, r19
     966:	b0 0d       	add	r27, r0
     968:	a1 1d       	adc	r26, r1
     96a:	62 1f       	adc	r22, r18
     96c:	83 9f       	mul	r24, r19
     96e:	a0 0d       	add	r26, r0
     970:	61 1d       	adc	r22, r1
     972:	22 1f       	adc	r18, r18
     974:	74 9f       	mul	r23, r20
     976:	33 27       	eor	r19, r19
     978:	a0 0d       	add	r26, r0
     97a:	61 1d       	adc	r22, r1
     97c:	23 1f       	adc	r18, r19
     97e:	84 9f       	mul	r24, r20
     980:	60 0d       	add	r22, r0
     982:	21 1d       	adc	r18, r1
     984:	82 2f       	mov	r24, r18
     986:	76 2f       	mov	r23, r22
     988:	6a 2f       	mov	r22, r26
     98a:	11 24       	eor	r1, r1
     98c:	9f 57       	subi	r25, 0x7F	; 127
     98e:	50 40       	sbci	r21, 0x00	; 0
     990:	9a f0       	brmi	.+38     	; 0x9b8 <__mulsf3_pse+0x88>
     992:	f1 f0       	breq	.+60     	; 0x9d0 <__mulsf3_pse+0xa0>
     994:	88 23       	and	r24, r24
     996:	4a f0       	brmi	.+18     	; 0x9aa <__mulsf3_pse+0x7a>
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	bb 1f       	adc	r27, r27
     99e:	66 1f       	adc	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	88 1f       	adc	r24, r24
     9a4:	91 50       	subi	r25, 0x01	; 1
     9a6:	50 40       	sbci	r21, 0x00	; 0
     9a8:	a9 f7       	brne	.-22     	; 0x994 <__mulsf3_pse+0x64>
     9aa:	9e 3f       	cpi	r25, 0xFE	; 254
     9ac:	51 05       	cpc	r21, r1
     9ae:	80 f0       	brcs	.+32     	; 0x9d0 <__mulsf3_pse+0xa0>
     9b0:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_inf>
     9b4:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_szero>
     9b8:	5f 3f       	cpi	r21, 0xFF	; 255
     9ba:	e4 f3       	brlt	.-8      	; 0x9b4 <__mulsf3_pse+0x84>
     9bc:	98 3e       	cpi	r25, 0xE8	; 232
     9be:	d4 f3       	brlt	.-12     	; 0x9b4 <__mulsf3_pse+0x84>
     9c0:	86 95       	lsr	r24
     9c2:	77 95       	ror	r23
     9c4:	67 95       	ror	r22
     9c6:	b7 95       	ror	r27
     9c8:	f7 95       	ror	r31
     9ca:	e7 95       	ror	r30
     9cc:	9f 5f       	subi	r25, 0xFF	; 255
     9ce:	c1 f7       	brne	.-16     	; 0x9c0 <__mulsf3_pse+0x90>
     9d0:	fe 2b       	or	r31, r30
     9d2:	88 0f       	add	r24, r24
     9d4:	91 1d       	adc	r25, r1
     9d6:	96 95       	lsr	r25
     9d8:	87 95       	ror	r24
     9da:	97 f9       	bld	r25, 7
     9dc:	08 95       	ret

000009de <__unordsf2>:
     9de:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_cmp>
     9e2:	88 0b       	sbc	r24, r24
     9e4:	99 0b       	sbc	r25, r25
     9e6:	08 95       	ret

000009e8 <initVariant>:
     9e8:	08 95       	ret

000009ea <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     9ea:	0e 94 4b 07 	call	0xe96	; 0xe96 <init>

	initVariant();
     9ee:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     9f2:	0e 94 b6 00 	call	0x16c	; 0x16c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     9fa:	0e 94 6f 01 	call	0x2de	; 0x2de <loop>
		if (serialEventRun) serialEventRun();
     9fe:	20 97       	sbiw	r28, 0x00	; 0
     a00:	e1 f3       	breq	.-8      	; 0x9fa <main+0x10>
     a02:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a06:	f9 cf       	rjmp	.-14     	; 0x9fa <main+0x10>

00000a08 <_ZN5Print17availableForWriteEv>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	08 95       	ret

00000a0e <_ZN5Print5flushEv>:
     a0e:	08 95       	ret

00000a10 <_ZN5Print5writeEPKhj>:
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	6c 01       	movw	r12, r24
     a22:	7a 01       	movw	r14, r20
     a24:	8b 01       	movw	r16, r22
     a26:	c0 e0       	ldi	r28, 0x00	; 0
     a28:	d0 e0       	ldi	r29, 0x00	; 0
     a2a:	ce 15       	cp	r28, r14
     a2c:	df 05       	cpc	r29, r15
     a2e:	81 f0       	breq	.+32     	; 0xa50 <_ZN5Print5writeEPKhj+0x40>
     a30:	d8 01       	movw	r26, r16
     a32:	6d 91       	ld	r22, X+
     a34:	8d 01       	movw	r16, r26
     a36:	d6 01       	movw	r26, r12
     a38:	ed 91       	ld	r30, X+
     a3a:	fc 91       	ld	r31, X
     a3c:	01 90       	ld	r0, Z+
     a3e:	f0 81       	ld	r31, Z
     a40:	e0 2d       	mov	r30, r0
     a42:	c6 01       	movw	r24, r12
     a44:	09 95       	icall
     a46:	89 2b       	or	r24, r25
     a48:	11 f0       	breq	.+4      	; 0xa4e <_ZN5Print5writeEPKhj+0x3e>
     a4a:	21 96       	adiw	r28, 0x01	; 1
     a4c:	ee cf       	rjmp	.-36     	; 0xa2a <_ZN5Print5writeEPKhj+0x1a>
     a4e:	7e 01       	movw	r14, r28
     a50:	c7 01       	movw	r24, r14
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	08 95       	ret

00000a64 <_ZN5Print5writeEPKc>:
     a64:	61 15       	cp	r22, r1
     a66:	71 05       	cpc	r23, r1
     a68:	79 f0       	breq	.+30     	; 0xa88 <_ZN5Print5writeEPKc+0x24>
     a6a:	fb 01       	movw	r30, r22
     a6c:	01 90       	ld	r0, Z+
     a6e:	00 20       	and	r0, r0
     a70:	e9 f7       	brne	.-6      	; 0xa6c <_ZN5Print5writeEPKc+0x8>
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	af 01       	movw	r20, r30
     a76:	46 1b       	sub	r20, r22
     a78:	57 0b       	sbc	r21, r23
     a7a:	dc 01       	movw	r26, r24
     a7c:	ed 91       	ld	r30, X+
     a7e:	fc 91       	ld	r31, X
     a80:	02 80       	ldd	r0, Z+2	; 0x02
     a82:	f3 81       	ldd	r31, Z+3	; 0x03
     a84:	e0 2d       	mov	r30, r0
     a86:	09 94       	ijmp
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	08 95       	ret

00000a8e <_ZN5Print5printEPKc>:
     a8e:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN5Print5writeEPKc>

00000a92 <_ZN5Print5printEc>:
     a92:	dc 01       	movw	r26, r24
     a94:	ed 91       	ld	r30, X+
     a96:	fc 91       	ld	r31, X
     a98:	01 90       	ld	r0, Z+
     a9a:	f0 81       	ld	r31, Z
     a9c:	e0 2d       	mov	r30, r0
     a9e:	09 94       	ijmp

00000aa0 <_ZN5Print11printNumberEmh>:
     aa0:	8f 92       	push	r8
     aa2:	9f 92       	push	r9
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	a1 97       	sbiw	r28, 0x21	; 33
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	7c 01       	movw	r14, r24
     ac6:	fa 01       	movw	r30, r20
     ac8:	cb 01       	movw	r24, r22
     aca:	19 a2       	std	Y+33, r1	; 0x21
     acc:	22 30       	cpi	r18, 0x02	; 2
     ace:	08 f4       	brcc	.+2      	; 0xad2 <_ZN5Print11printNumberEmh+0x32>
     ad0:	2a e0       	ldi	r18, 0x0A	; 10
     ad2:	8e 01       	movw	r16, r28
     ad4:	0f 5d       	subi	r16, 0xDF	; 223
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	82 2e       	mov	r8, r18
     ada:	91 2c       	mov	r9, r1
     adc:	a1 2c       	mov	r10, r1
     ade:	b1 2c       	mov	r11, r1
     ae0:	bf 01       	movw	r22, r30
     ae2:	a5 01       	movw	r20, r10
     ae4:	94 01       	movw	r18, r8
     ae6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__udivmodsi4>
     aea:	f9 01       	movw	r30, r18
     aec:	ca 01       	movw	r24, r20
     aee:	01 50       	subi	r16, 0x01	; 1
     af0:	11 09       	sbc	r17, r1
     af2:	6a 30       	cpi	r22, 0x0A	; 10
     af4:	10 f4       	brcc	.+4      	; 0xafa <_ZN5Print11printNumberEmh+0x5a>
     af6:	60 5d       	subi	r22, 0xD0	; 208
     af8:	01 c0       	rjmp	.+2      	; 0xafc <_ZN5Print11printNumberEmh+0x5c>
     afa:	69 5c       	subi	r22, 0xC9	; 201
     afc:	d8 01       	movw	r26, r16
     afe:	6c 93       	st	X, r22
     b00:	23 2b       	or	r18, r19
     b02:	24 2b       	or	r18, r20
     b04:	25 2b       	or	r18, r21
     b06:	61 f7       	brne	.-40     	; 0xae0 <_ZN5Print11printNumberEmh+0x40>
     b08:	b8 01       	movw	r22, r16
     b0a:	c7 01       	movw	r24, r14
     b0c:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN5Print5writeEPKc>
     b10:	a1 96       	adiw	r28, 0x21	; 33
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	9f 90       	pop	r9
     b2e:	8f 90       	pop	r8
     b30:	08 95       	ret

00000b32 <_ZN5Print5printEmi>:
     b32:	21 15       	cp	r18, r1
     b34:	31 05       	cpc	r19, r1
     b36:	41 f4       	brne	.+16     	; 0xb48 <_ZN5Print5printEmi+0x16>
     b38:	dc 01       	movw	r26, r24
     b3a:	ed 91       	ld	r30, X+
     b3c:	fc 91       	ld	r31, X
     b3e:	01 90       	ld	r0, Z+
     b40:	f0 81       	ld	r31, Z
     b42:	e0 2d       	mov	r30, r0
     b44:	64 2f       	mov	r22, r20
     b46:	09 94       	ijmp
     b48:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <_ZN5Print11printNumberEmh>

00000b4c <_ZN5Print5printEji>:
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	0c 94 99 05 	jmp	0xb32	; 0xb32 <_ZN5Print5printEmi>

00000b58 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     b58:	7f 92       	push	r7
     b5a:	8f 92       	push	r8
     b5c:	9f 92       	push	r9
     b5e:	af 92       	push	r10
     b60:	bf 92       	push	r11
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	8c 01       	movw	r16, r24
     b74:	6a 01       	movw	r12, r20
     b76:	7b 01       	movw	r14, r22
     b78:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     b7a:	9a 01       	movw	r18, r20
     b7c:	ab 01       	movw	r20, r22
     b7e:	c7 01       	movw	r24, r14
     b80:	b6 01       	movw	r22, r12
     b82:	0e 94 ef 04 	call	0x9de	; 0x9de <__unordsf2>
     b86:	88 23       	and	r24, r24
     b88:	19 f0       	breq	.+6      	; 0xb90 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     b8a:	68 e8       	ldi	r22, 0x88	; 136
     b8c:	72 e0       	ldi	r23, 0x02	; 2
     b8e:	27 c0       	rjmp	.+78     	; 0xbde <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     b90:	46 01       	movw	r8, r12
     b92:	57 01       	movw	r10, r14
     b94:	e8 94       	clt
     b96:	b7 f8       	bld	r11, 7
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	4f e7       	ldi	r20, 0x7F	; 127
     b9e:	5f e7       	ldi	r21, 0x7F	; 127
     ba0:	c5 01       	movw	r24, r10
     ba2:	b4 01       	movw	r22, r8
     ba4:	0e 94 ef 04 	call	0x9de	; 0x9de <__unordsf2>
     ba8:	81 11       	cpse	r24, r1
     baa:	0d c0       	rjmp	.+26     	; 0xbc6 <_ZN5Print10printFloatEdh+0x6e>
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	3f ef       	ldi	r19, 0xFF	; 255
     bb0:	4f e7       	ldi	r20, 0x7F	; 127
     bb2:	5f e7       	ldi	r21, 0x7F	; 127
     bb4:	c5 01       	movw	r24, r10
     bb6:	b4 01       	movw	r22, r8
     bb8:	0e 94 2a 03 	call	0x654	; 0x654 <__cmpsf2>
     bbc:	18 16       	cp	r1, r24
     bbe:	1c f4       	brge	.+6      	; 0xbc6 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     bc0:	6c e8       	ldi	r22, 0x8C	; 140
     bc2:	72 e0       	ldi	r23, 0x02	; 2
     bc4:	0c c0       	rjmp	.+24     	; 0xbde <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     bc6:	2f ef       	ldi	r18, 0xFF	; 255
     bc8:	3f ef       	ldi	r19, 0xFF	; 255
     bca:	4f e7       	ldi	r20, 0x7F	; 127
     bcc:	5f e4       	ldi	r21, 0x4F	; 79
     bce:	c7 01       	movw	r24, r14
     bd0:	b6 01       	movw	r22, r12
     bd2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__gesf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	94 f4       	brge	.+36     	; 0xbfe <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     bda:	60 e9       	ldi	r22, 0x90	; 144
     bdc:	72 e0       	ldi	r23, 0x02	; 2
     bde:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     bfa:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     bfe:	2f ef       	ldi	r18, 0xFF	; 255
     c00:	3f ef       	ldi	r19, 0xFF	; 255
     c02:	4f e7       	ldi	r20, 0x7F	; 127
     c04:	5f ec       	ldi	r21, 0xCF	; 207
     c06:	c7 01       	movw	r24, r14
     c08:	b6 01       	movw	r22, r12
     c0a:	0e 94 2a 03 	call	0x654	; 0x654 <__cmpsf2>
     c0e:	87 fd       	sbrc	r24, 7
     c10:	e4 cf       	rjmp	.-56     	; 0xbda <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	a9 01       	movw	r20, r18
     c18:	c7 01       	movw	r24, r14
     c1a:	b6 01       	movw	r22, r12
     c1c:	0e 94 2a 03 	call	0x654	; 0x654 <__cmpsf2>
     c20:	87 ff       	sbrs	r24, 7
     c22:	0a c0       	rjmp	.+20     	; 0xc38 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     c24:	6d e2       	ldi	r22, 0x2D	; 45
     c26:	c8 01       	movw	r24, r16
     c28:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN5Print5printEc>
     c2c:	ec 01       	movw	r28, r24
     number = -number;
     c2e:	f7 fa       	bst	r15, 7
     c30:	f0 94       	com	r15
     c32:	f7 f8       	bld	r15, 7
     c34:	f0 94       	com	r15
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     c38:	c0 e0       	ldi	r28, 0x00	; 0
     c3a:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     c3c:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     c46:	7b 14       	cp	r7, r11
     c48:	41 f0       	breq	.+16     	; 0xc5a <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e2       	ldi	r20, 0x20	; 32
     c50:	51 e4       	ldi	r21, 0x41	; 65
     c52:	0e 94 2f 03 	call	0x65e	; 0x65e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     c56:	b3 94       	inc	r11
     c58:	f6 cf       	rjmp	.-20     	; 0xc46 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     c5a:	a7 01       	movw	r20, r14
     c5c:	96 01       	movw	r18, r12
     c5e:	0e 94 be 02 	call	0x57c	; 0x57c <__addsf3>
     c62:	6b 01       	movw	r12, r22
     c64:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     c66:	0e 94 a1 03 	call	0x742	; 0x742 <__fixunssfsi>
     c6a:	4b 01       	movw	r8, r22
     c6c:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     c6e:	2a e0       	ldi	r18, 0x0A	; 10
     c70:	ab 01       	movw	r20, r22
     c72:	bc 01       	movw	r22, r24
     c74:	c8 01       	movw	r24, r16
     c76:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     c7a:	c8 0f       	add	r28, r24
     c7c:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     c7e:	77 20       	and	r7, r7
     c80:	b9 f1       	breq	.+110    	; 0xcf0 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     c82:	c5 01       	movw	r24, r10
     c84:	b4 01       	movw	r22, r8
     c86:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatunsisf>
     c8a:	9b 01       	movw	r18, r22
     c8c:	ac 01       	movw	r20, r24
     c8e:	c7 01       	movw	r24, r14
     c90:	b6 01       	movw	r22, r12
     c92:	0e 94 bd 02 	call	0x57a	; 0x57a <__subsf3>
     c96:	6b 01       	movw	r12, r22
     c98:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     c9a:	6e e2       	ldi	r22, 0x2E	; 46
     c9c:	c8 01       	movw	r24, r16
     c9e:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN5Print5printEc>
     ca2:	c8 0f       	add	r28, r24
     ca4:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e2       	ldi	r20, 0x20	; 32
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	c7 01       	movw	r24, r14
     cb0:	b6 01       	movw	r22, r12
     cb2:	0e 94 82 04 	call	0x904	; 0x904 <__mulsf3>
     cb6:	4b 01       	movw	r8, r22
     cb8:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     cba:	0e 94 a1 03 	call	0x742	; 0x742 <__fixunssfsi>
     cbe:	6b 01       	movw	r12, r22
     cc0:	7c 01       	movw	r14, r24
    n += print(toPrint);
     cc2:	4a e0       	ldi	r20, 0x0A	; 10
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	c8 01       	movw	r24, r16
     cc8:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_ZN5Print5printEji>
     ccc:	c8 0f       	add	r28, r24
     cce:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     cd0:	b6 01       	movw	r22, r12
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatunsisf>
     cda:	9b 01       	movw	r18, r22
     cdc:	ac 01       	movw	r20, r24
     cde:	c5 01       	movw	r24, r10
     ce0:	b4 01       	movw	r22, r8
     ce2:	0e 94 bd 02 	call	0x57a	; 0x57a <__subsf3>
     ce6:	6b 01       	movw	r12, r22
     ce8:	7c 01       	movw	r14, r24
     cea:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     cec:	71 10       	cpse	r7, r1
     cee:	db cf       	rjmp	.-74     	; 0xca6 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     cf0:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	bf 90       	pop	r11
     d04:	af 90       	pop	r10
     d06:	9f 90       	pop	r9
     d08:	8f 90       	pop	r8
     d0a:	7f 90       	pop	r7
     d0c:	08 95       	ret

00000d0e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     d0e:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <_ZN5Print10printFloatEdh>

00000d12 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     d28:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <timer0_millis>
     d2c:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <timer0_millis+0x1>
     d30:	a0 91 bd 02 	lds	r26, 0x02BD	; 0x8002bd <timer0_millis+0x2>
     d34:	b0 91 be 02 	lds	r27, 0x02BE	; 0x8002be <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     d38:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     d3c:	23 e0       	ldi	r18, 0x03	; 3
     d3e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     d40:	2d 37       	cpi	r18, 0x7D	; 125
     d42:	20 f4       	brcc	.+8      	; 0xd4c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	a1 1d       	adc	r26, r1
     d48:	b1 1d       	adc	r27, r1
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     d4c:	26 e8       	ldi	r18, 0x86	; 134
     d4e:	23 0f       	add	r18, r19
		m += 1;
     d50:	02 96       	adiw	r24, 0x02	; 2
     d52:	a1 1d       	adc	r26, r1
     d54:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     d56:	20 93 ba 02 	sts	0x02BA, r18	; 0x8002ba <timer0_fract>
	timer0_millis = m;
     d5a:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <timer0_millis>
     d5e:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <timer0_millis+0x1>
     d62:	a0 93 bd 02 	sts	0x02BD, r26	; 0x8002bd <timer0_millis+0x2>
     d66:	b0 93 be 02 	sts	0x02BE, r27	; 0x8002be <timer0_millis+0x3>
	timer0_overflow_count++;
     d6a:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <timer0_overflow_count>
     d6e:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <timer0_overflow_count+0x1>
     d72:	a0 91 c1 02 	lds	r26, 0x02C1	; 0x8002c1 <timer0_overflow_count+0x2>
     d76:	b0 91 c2 02 	lds	r27, 0x02C2	; 0x8002c2 <timer0_overflow_count+0x3>
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	a1 1d       	adc	r26, r1
     d7e:	b1 1d       	adc	r27, r1
     d80:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <timer0_overflow_count>
     d84:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <timer0_overflow_count+0x1>
     d88:	a0 93 c1 02 	sts	0x02C1, r26	; 0x8002c1 <timer0_overflow_count+0x2>
     d8c:	b0 93 c2 02 	sts	0x02C2, r27	; 0x8002c2 <timer0_overflow_count+0x3>
}
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     da6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     da8:	f8 94       	cli
	m = timer0_millis;
     daa:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <timer0_millis>
     dae:	70 91 bc 02 	lds	r23, 0x02BC	; 0x8002bc <timer0_millis+0x1>
     db2:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <timer0_millis+0x2>
     db6:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <timer0_millis+0x3>
	SREG = oldSREG;
     dba:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     dbc:	08 95       	ret

00000dbe <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     dbe:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     dc0:	f8 94       	cli
	m = timer0_overflow_count;
     dc2:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <timer0_overflow_count>
     dc6:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <timer0_overflow_count+0x1>
     dca:	a0 91 c1 02 	lds	r26, 0x02C1	; 0x8002c1 <timer0_overflow_count+0x2>
     dce:	b0 91 c2 02 	lds	r27, 0x02C2	; 0x8002c2 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     dd2:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     dd4:	a8 9b       	sbis	0x15, 0	; 21
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <micros+0x24>
     dd8:	2f 3f       	cpi	r18, 0xFF	; 255
     dda:	19 f0       	breq	.+6      	; 0xde2 <micros+0x24>
		m++;
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	a1 1d       	adc	r26, r1
     de0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     de2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     de4:	ba 2f       	mov	r27, r26
     de6:	a9 2f       	mov	r26, r25
     de8:	98 2f       	mov	r25, r24
     dea:	88 27       	eor	r24, r24
     dec:	82 0f       	add	r24, r18
     dee:	91 1d       	adc	r25, r1
     df0:	a1 1d       	adc	r26, r1
     df2:	b1 1d       	adc	r27, r1
     df4:	bc 01       	movw	r22, r24
     df6:	cd 01       	movw	r24, r26
     df8:	42 e0       	ldi	r20, 0x02	; 2
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	88 1f       	adc	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	4a 95       	dec	r20
     e04:	d1 f7       	brne	.-12     	; 0xdfa <micros+0x3c>
}
     e06:	08 95       	ret

00000e08 <delay>:

void delay(unsigned long ms)
{
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	6b 01       	movw	r12, r22
     e1a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e1c:	0e 94 df 06 	call	0xdbe	; 0xdbe <micros>
     e20:	4b 01       	movw	r8, r22
     e22:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e24:	c1 14       	cp	r12, r1
     e26:	d1 04       	cpc	r13, r1
     e28:	e1 04       	cpc	r14, r1
     e2a:	f1 04       	cpc	r15, r1
     e2c:	01 f1       	breq	.+64     	; 0xe6e <delay+0x66>
		yield();
     e2e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e32:	0e 94 df 06 	call	0xdbe	; 0xdbe <micros>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	88 19       	sub	r24, r8
     e3c:	99 09       	sbc	r25, r9
     e3e:	aa 09       	sbc	r26, r10
     e40:	bb 09       	sbc	r27, r11
     e42:	88 3e       	cpi	r24, 0xE8	; 232
     e44:	93 40       	sbci	r25, 0x03	; 3
     e46:	a1 05       	cpc	r26, r1
     e48:	b1 05       	cpc	r27, r1
     e4a:	60 f3       	brcs	.-40     	; 0xe24 <delay+0x1c>
			ms--;
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	c2 1a       	sub	r12, r18
     e50:	d1 08       	sbc	r13, r1
     e52:	e1 08       	sbc	r14, r1
     e54:	f1 08       	sbc	r15, r1
			start += 1000;
     e56:	88 ee       	ldi	r24, 0xE8	; 232
     e58:	88 0e       	add	r8, r24
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	98 1e       	adc	r9, r24
     e5e:	a1 1c       	adc	r10, r1
     e60:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     e62:	c1 14       	cp	r12, r1
     e64:	d1 04       	cpc	r13, r1
     e66:	e1 04       	cpc	r14, r1
     e68:	f1 04       	cpc	r15, r1
     e6a:	19 f7       	brne	.-58     	; 0xe32 <delay+0x2a>
     e6c:	db cf       	rjmp	.-74     	; 0xe24 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	9f 90       	pop	r9
     e7c:	8f 90       	pop	r8
     e7e:	08 95       	ret

00000e80 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	91 05       	cpc	r25, r1
     e84:	38 f0       	brcs	.+14     	; 0xe94 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e8e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <delayMicroseconds+0x10>
     e94:	08 95       	ret

00000e96 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e96:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e98:	84 b5       	in	r24, 0x24	; 36
     e9a:	82 60       	ori	r24, 0x02	; 2
     e9c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e9e:	84 b5       	in	r24, 0x24	; 36
     ea0:	81 60       	ori	r24, 0x01	; 1
     ea2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ea4:	85 b5       	in	r24, 0x25	; 37
     ea6:	82 60       	ori	r24, 0x02	; 2
     ea8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     eaa:	85 b5       	in	r24, 0x25	; 37
     eac:	81 60       	ori	r24, 0x01	; 1
     eae:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     eb0:	ee e6       	ldi	r30, 0x6E	; 110
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	81 60       	ori	r24, 0x01	; 1
     eb8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     eba:	e1 e8       	ldi	r30, 0x81	; 129
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ec0:	80 81       	ld	r24, Z
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ec6:	80 81       	ld	r24, Z
     ec8:	81 60       	ori	r24, 0x01	; 1
     eca:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ecc:	e0 e8       	ldi	r30, 0x80	; 128
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	81 60       	ori	r24, 0x01	; 1
     ed4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ed6:	e1 eb       	ldi	r30, 0xB1	; 177
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	84 60       	ori	r24, 0x04	; 4
     ede:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ee0:	e0 eb       	ldi	r30, 0xB0	; 176
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     eea:	ea e7       	ldi	r30, 0x7A	; 122
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	84 60       	ori	r24, 0x04	; 4
     ef2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     ef4:	80 81       	ld	r24, Z
     ef6:	82 60       	ori	r24, 0x02	; 2
     ef8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     efa:	80 81       	ld	r24, Z
     efc:	81 60       	ori	r24, 0x01	; 1
     efe:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f00:	80 81       	ld	r24, Z
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f06:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f0a:	08 95       	ret

00000f0c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	81 f0       	breq	.+32     	; 0xf30 <turnOffPWM+0x24>
     f10:	28 f4       	brcc	.+10     	; 0xf1c <turnOffPWM+0x10>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	99 f0       	breq	.+38     	; 0xf3c <turnOffPWM+0x30>
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	a1 f0       	breq	.+40     	; 0xf42 <turnOffPWM+0x36>
     f1a:	08 95       	ret
     f1c:	87 30       	cpi	r24, 0x07	; 7
     f1e:	a9 f0       	breq	.+42     	; 0xf4a <turnOffPWM+0x3e>
     f20:	88 30       	cpi	r24, 0x08	; 8
     f22:	b9 f0       	breq	.+46     	; 0xf52 <turnOffPWM+0x46>
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	d1 f4       	brne	.+52     	; 0xf5c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f28:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f2c:	8f 7d       	andi	r24, 0xDF	; 223
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f30:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f34:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f36:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f3a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f3c:	84 b5       	in	r24, 0x24	; 36
     f3e:	8f 77       	andi	r24, 0x7F	; 127
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f42:	84 b5       	in	r24, 0x24	; 36
     f44:	8f 7d       	andi	r24, 0xDF	; 223
     f46:	84 bd       	out	0x24, r24	; 36
     f48:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f4a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f4e:	8f 77       	andi	r24, 0x7F	; 127
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f52:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f56:	8f 7d       	andi	r24, 0xDF	; 223
     f58:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f5c:	08 95       	ret

00000f5e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	fc 01       	movw	r30, r24
     f66:	e4 58       	subi	r30, 0x84	; 132
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f6c:	fc 01       	movw	r30, r24
     f6e:	e0 57       	subi	r30, 0x70	; 112
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f74:	88 23       	and	r24, r24
     f76:	61 f1       	breq	.+88     	; 0xfd0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	fc 01       	movw	r30, r24
     f80:	e8 54       	subi	r30, 0x48	; 72
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	c5 91       	lpm	r28, Z+
     f86:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     f88:	fc 01       	movw	r30, r24
     f8a:	e2 55       	subi	r30, 0x52	; 82
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	a5 91       	lpm	r26, Z+
     f90:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     f92:	61 11       	cpse	r22, r1
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     f96:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f98:	f8 94       	cli
		*reg &= ~bit;
     f9a:	88 81       	ld	r24, Y
     f9c:	20 95       	com	r18
     f9e:	82 23       	and	r24, r18
     fa0:	88 83       	st	Y, r24
		*out &= ~bit;
     fa2:	ec 91       	ld	r30, X
     fa4:	2e 23       	and	r18, r30
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     fa8:	62 30       	cpi	r22, 0x02	; 2
     faa:	61 f4       	brne	.+24     	; 0xfc4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     fac:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fae:	f8 94       	cli
		*reg &= ~bit;
     fb0:	88 81       	ld	r24, Y
     fb2:	32 2f       	mov	r19, r18
     fb4:	30 95       	com	r19
     fb6:	83 23       	and	r24, r19
     fb8:	88 83       	st	Y, r24
		*out |= bit;
     fba:	ec 91       	ld	r30, X
     fbc:	2e 2b       	or	r18, r30
     fbe:	2c 93       	st	X, r18
		SREG = oldSREG;
     fc0:	9f bf       	out	0x3f, r25	; 63
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     fc4:	8f b7       	in	r24, 0x3f	; 63
                cli();
     fc6:	f8 94       	cli
		*reg |= bit;
     fc8:	e8 81       	ld	r30, Y
     fca:	2e 2b       	or	r18, r30
     fcc:	28 83       	st	Y, r18
		SREG = oldSREG;
     fce:	8f bf       	out	0x3f, r24	; 63
	}
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	f9 01       	movw	r30, r18
     fe2:	e8 59       	subi	r30, 0x98	; 152
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     fe8:	f9 01       	movw	r30, r18
     fea:	e4 58       	subi	r30, 0x84	; 132
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     ff0:	f9 01       	movw	r30, r18
     ff2:	e0 57       	subi	r30, 0x70	; 112
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ff8:	cc 23       	and	r28, r28
     ffa:	c1 f0       	breq	.+48     	; 0x102c <digitalWrite+0x56>
     ffc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ffe:	81 11       	cpse	r24, r1
    1000:	0e 94 86 07 	call	0xf0c	; 0xf0c <turnOffPWM>

	out = portOutputRegister(port);
    1004:	ec 2f       	mov	r30, r28
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	e2 55       	subi	r30, 0x52	; 82
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	a5 91       	lpm	r26, Z+
    1012:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1014:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1016:	f8 94       	cli

	if (val == LOW) {
    1018:	11 11       	cpse	r17, r1
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <digitalWrite+0x4e>
		*out &= ~bit;
    101c:	8c 91       	ld	r24, X
    101e:	d0 95       	com	r29
    1020:	d8 23       	and	r29, r24
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1024:	ec 91       	ld	r30, X
    1026:	de 2b       	or	r29, r30
    1028:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    102a:	9f bf       	out	0x3f, r25	; 63
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	08 95       	ret

00001034 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	e8 59       	subi	r30, 0x98	; 152
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1044:	f9 01       	movw	r30, r18
    1046:	e4 58       	subi	r30, 0x84	; 132
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    104c:	f9 01       	movw	r30, r18
    104e:	e0 57       	subi	r30, 0x70	; 112
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1054:	cc 23       	and	r28, r28
    1056:	91 f0       	breq	.+36     	; 0x107c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1058:	81 11       	cpse	r24, r1
    105a:	0e 94 86 07 	call	0xf0c	; 0xf0c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    105e:	ec 2f       	mov	r30, r28
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ec 55       	subi	r30, 0x5C	; 92
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	a5 91       	lpm	r26, Z+
    106c:	b4 91       	lpm	r27, Z
    106e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1070:	ed 23       	and	r30, r29
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	21 f4       	brne	.+8      	; 0x1080 <digitalRead+0x4c>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <digitalRead+0x4c>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	ec 01       	movw	r28, r24
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	8e 81       	ldd	r24, Y+6	; 0x06
    1090:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 40 07 	call	0xe80	; 0xe80 <delayMicroseconds>
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	8e 81       	ldd	r24, Y+6	; 0x06
    10a0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 40 07 	call	0xe80	; 0xe80 <delayMicroseconds>
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	8e 81       	ldd	r24, Y+6	; 0x06
    10b0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    10b4:	84 e6       	ldi	r24, 0x64	; 100
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	0c 94 40 07 	jmp	0xe80	; 0xe80 <delayMicroseconds>

000010c0 <_ZN13LiquidCrystal10write4bitsEh>:
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	6c 01       	movw	r12, r24
    10d2:	7c 01       	movw	r14, r24
    10d4:	87 e0       	ldi	r24, 0x07	; 7
    10d6:	e8 0e       	add	r14, r24
    10d8:	f1 1c       	adc	r15, r1
    10da:	c0 e0       	ldi	r28, 0x00	; 0
    10dc:	d0 e0       	ldi	r29, 0x00	; 0
    10de:	06 2f       	mov	r16, r22
    10e0:	10 e0       	ldi	r17, 0x00	; 0
    10e2:	b8 01       	movw	r22, r16
    10e4:	0c 2e       	mov	r0, r28
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    10e8:	75 95       	asr	r23
    10ea:	67 95       	ror	r22
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    10f0:	61 70       	andi	r22, 0x01	; 1
    10f2:	f7 01       	movw	r30, r14
    10f4:	81 91       	ld	r24, Z+
    10f6:	7f 01       	movw	r14, r30
    10f8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    10fc:	21 96       	adiw	r28, 0x01	; 1
    10fe:	c4 30       	cpi	r28, 0x04	; 4
    1100:	d1 05       	cpc	r29, r1
    1102:	79 f7       	brne	.-34     	; 0x10e2 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1104:	c6 01       	movw	r24, r12
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	0c 94 43 08 	jmp	0x1086	; 0x1086 <_ZN13LiquidCrystal11pulseEnableEv>

0000111a <_ZN13LiquidCrystal10write8bitsEh>:
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	6c 01       	movw	r12, r24
    112c:	7c 01       	movw	r14, r24
    112e:	87 e0       	ldi	r24, 0x07	; 7
    1130:	e8 0e       	add	r14, r24
    1132:	f1 1c       	adc	r15, r1
    1134:	c0 e0       	ldi	r28, 0x00	; 0
    1136:	d0 e0       	ldi	r29, 0x00	; 0
    1138:	06 2f       	mov	r16, r22
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	b8 01       	movw	r22, r16
    113e:	0c 2e       	mov	r0, r28
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    1142:	75 95       	asr	r23
    1144:	67 95       	ror	r22
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    114a:	61 70       	andi	r22, 0x01	; 1
    114c:	f7 01       	movw	r30, r14
    114e:	81 91       	ld	r24, Z+
    1150:	7f 01       	movw	r14, r30
    1152:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    1156:	21 96       	adiw	r28, 0x01	; 1
    1158:	c8 30       	cpi	r28, 0x08	; 8
    115a:	d1 05       	cpc	r29, r1
    115c:	79 f7       	brne	.-34     	; 0x113c <_ZN13LiquidCrystal10write8bitsEh+0x22>
    115e:	c6 01       	movw	r24, r12
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	0c 94 43 08 	jmp	0x1086	; 0x1086 <_ZN13LiquidCrystal11pulseEnableEv>

00001174 <_ZN13LiquidCrystal4sendEhh>:
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    117c:	16 2f       	mov	r17, r22
    117e:	64 2f       	mov	r22, r20
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	8f 3f       	cpi	r24, 0xFF	; 255
    118a:	19 f0       	breq	.+6      	; 0x1192 <_ZN13LiquidCrystal4sendEhh+0x1e>
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    1192:	8f 85       	ldd	r24, Y+15	; 0x0f
    1194:	61 2f       	mov	r22, r17
    1196:	84 ff       	sbrs	r24, 4
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <_ZN13LiquidCrystal4sendEhh+0x32>
    119a:	ce 01       	movw	r24, r28
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0c 94 8d 08 	jmp	0x111a	; 0x111a <_ZN13LiquidCrystal10write8bitsEh>
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	75 95       	asr	r23
    11ac:	67 95       	ror	r22
    11ae:	8a 95       	dec	r24
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <_ZN13LiquidCrystal4sendEhh+0x36>
    11b2:	ce 01       	movw	r24, r28
    11b4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN13LiquidCrystal10write4bitsEh>
    11b8:	61 2f       	mov	r22, r17
    11ba:	ce 01       	movw	r24, r28
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <_ZN13LiquidCrystal10write4bitsEh>

000011c6 <_ZN13LiquidCrystal7commandEh>:
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <_ZN13LiquidCrystal4sendEhh>

000011cc <_ZN13LiquidCrystal5clearEv>:
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN13LiquidCrystal7commandEh>
    11d2:	80 ed       	ldi	r24, 0xD0	; 208
    11d4:	97 e0       	ldi	r25, 0x07	; 7
    11d6:	0c 94 40 07 	jmp	0xe80	; 0xe80 <delayMicroseconds>

000011da <_ZN13LiquidCrystal9setCursorEhh>:
    11da:	fc 01       	movw	r30, r24
    11dc:	44 30       	cpi	r20, 0x04	; 4
    11de:	08 f0       	brcs	.+2      	; 0x11e2 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    11e0:	43 e0       	ldi	r20, 0x03	; 3
    11e2:	83 89       	ldd	r24, Z+19	; 0x13
    11e4:	48 17       	cp	r20, r24
    11e6:	10 f0       	brcs	.+4      	; 0x11ec <_ZN13LiquidCrystal9setCursorEhh+0x12>
    11e8:	4f ef       	ldi	r20, 0xFF	; 255
    11ea:	48 0f       	add	r20, r24
    11ec:	df 01       	movw	r26, r30
    11ee:	a4 0f       	add	r26, r20
    11f0:	b1 1d       	adc	r27, r1
    11f2:	54 96       	adiw	r26, 0x14	; 20
    11f4:	9c 91       	ld	r25, X
    11f6:	69 0f       	add	r22, r25
    11f8:	60 68       	ori	r22, 0x80	; 128
    11fa:	cf 01       	movw	r24, r30
    11fc:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <_ZN13LiquidCrystal7commandEh>

00001200 <_ZN13LiquidCrystal7displayEv>:
    1200:	fc 01       	movw	r30, r24
    1202:	60 89       	ldd	r22, Z+16	; 0x10
    1204:	26 2f       	mov	r18, r22
    1206:	24 60       	ori	r18, 0x04	; 4
    1208:	20 8b       	std	Z+16, r18	; 0x10
    120a:	6c 60       	ori	r22, 0x0C	; 12
    120c:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <_ZN13LiquidCrystal7commandEh>

00001210 <_ZN13LiquidCrystal5beginEhhh>:
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	ec 01       	movw	r28, r24
    121e:	42 30       	cpi	r20, 0x02	; 2
    1220:	18 f0       	brcs	.+6      	; 0x1228 <_ZN13LiquidCrystal5beginEhhh+0x18>
    1222:	8f 85       	ldd	r24, Y+15	; 0x0f
    1224:	88 60       	ori	r24, 0x08	; 8
    1226:	8f 87       	std	Y+15, r24	; 0x0f
    1228:	4b 8b       	std	Y+19, r20	; 0x13
    122a:	1c 8a       	std	Y+20, r1	; 0x14
    122c:	80 e4       	ldi	r24, 0x40	; 64
    122e:	8d 8b       	std	Y+21, r24	; 0x15
    1230:	6e 8b       	std	Y+22, r22	; 0x16
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	60 5c       	subi	r22, 0xC0	; 192
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	6f 8b       	std	Y+23, r22	; 0x17
    123a:	22 23       	and	r18, r18
    123c:	29 f0       	breq	.+10     	; 0x1248 <_ZN13LiquidCrystal5beginEhhh+0x38>
    123e:	41 30       	cpi	r20, 0x01	; 1
    1240:	19 f4       	brne	.+6      	; 0x1248 <_ZN13LiquidCrystal5beginEhhh+0x38>
    1242:	8f 85       	ldd	r24, Y+15	; 0x0f
    1244:	84 60       	ori	r24, 0x04	; 4
    1246:	8f 87       	std	Y+15, r24	; 0x0f
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	0e 94 af 07 	call	0xf5e	; 0xf5e <pinMode>
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	8f 3f       	cpi	r24, 0xFF	; 255
    1254:	19 f0       	breq	.+6      	; 0x125c <_ZN13LiquidCrystal5beginEhhh+0x4c>
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	0e 94 af 07 	call	0xf5e	; 0xf5e <pinMode>
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	8e 81       	ldd	r24, Y+6	; 0x06
    1260:	0e 94 af 07 	call	0xf5e	; 0xf5e <pinMode>
    1264:	7e 01       	movw	r14, r28
    1266:	87 e0       	ldi	r24, 0x07	; 7
    1268:	e8 0e       	add	r14, r24
    126a:	f1 1c       	adc	r15, r1
    126c:	00 e0       	ldi	r16, 0x00	; 0
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	8f 85       	ldd	r24, Y+15	; 0x0f
    1272:	84 fd       	sbrc	r24, 4
    1274:	03 c0       	rjmp	.+6      	; 0x127c <_ZN13LiquidCrystal5beginEhhh+0x6c>
    1276:	84 e0       	ldi	r24, 0x04	; 4
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <_ZN13LiquidCrystal5beginEhhh+0x70>
    127c:	88 e0       	ldi	r24, 0x08	; 8
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	08 17       	cp	r16, r24
    1282:	19 07       	cpc	r17, r25
    1284:	4c f4       	brge	.+18     	; 0x1298 <_ZN13LiquidCrystal5beginEhhh+0x88>
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	f7 01       	movw	r30, r14
    128a:	81 91       	ld	r24, Z+
    128c:	7f 01       	movw	r14, r30
    128e:	0e 94 af 07 	call	0xf5e	; 0xf5e <pinMode>
    1292:	0f 5f       	subi	r16, 0xFF	; 255
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	ec cf       	rjmp	.-40     	; 0x1270 <_ZN13LiquidCrystal5beginEhhh+0x60>
    1298:	80 e5       	ldi	r24, 0x50	; 80
    129a:	93 ec       	ldi	r25, 0xC3	; 195
    129c:	0e 94 40 07 	call	0xe80	; 0xe80 <delayMicroseconds>
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	8e 81       	ldd	r24, Y+6	; 0x06
    12ac:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	8f 3f       	cpi	r24, 0xFF	; 255
    12b4:	19 f0       	breq	.+6      	; 0x12bc <_ZN13LiquidCrystal5beginEhhh+0xac>
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <digitalWrite>
    12bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    12be:	64 fd       	sbrc	r22, 4
    12c0:	1d c0       	rjmp	.+58     	; 0x12fc <_ZN13LiquidCrystal5beginEhhh+0xec>
    12c2:	63 e0       	ldi	r22, 0x03	; 3
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN13LiquidCrystal10write4bitsEh>
    12ca:	84 e9       	ldi	r24, 0x94	; 148
    12cc:	91 e1       	ldi	r25, 0x11	; 17
    12ce:	0e 94 40 07 	call	0xe80	; 0xe80 <delayMicroseconds>
    12d2:	63 e0       	ldi	r22, 0x03	; 3
    12d4:	ce 01       	movw	r24, r28
    12d6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN13LiquidCrystal10write4bitsEh>
    12da:	84 e9       	ldi	r24, 0x94	; 148
    12dc:	91 e1       	ldi	r25, 0x11	; 17
    12de:	0e 94 40 07 	call	0xe80	; 0xe80 <delayMicroseconds>
    12e2:	63 e0       	ldi	r22, 0x03	; 3
    12e4:	ce 01       	movw	r24, r28
    12e6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN13LiquidCrystal10write4bitsEh>
    12ea:	86 e9       	ldi	r24, 0x96	; 150
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 40 07 	call	0xe80	; 0xe80 <delayMicroseconds>
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN13LiquidCrystal10write4bitsEh>
    12fa:	16 c0       	rjmp	.+44     	; 0x1328 <_ZN13LiquidCrystal5beginEhhh+0x118>
    12fc:	60 62       	ori	r22, 0x20	; 32
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN13LiquidCrystal7commandEh>
    1304:	84 e9       	ldi	r24, 0x94	; 148
    1306:	91 e1       	ldi	r25, 0x11	; 17
    1308:	0e 94 40 07 	call	0xe80	; 0xe80 <delayMicroseconds>
    130c:	6f 85       	ldd	r22, Y+15	; 0x0f
    130e:	60 62       	ori	r22, 0x20	; 32
    1310:	ce 01       	movw	r24, r28
    1312:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN13LiquidCrystal7commandEh>
    1316:	86 e9       	ldi	r24, 0x96	; 150
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 40 07 	call	0xe80	; 0xe80 <delayMicroseconds>
    131e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1320:	60 62       	ori	r22, 0x20	; 32
    1322:	ce 01       	movw	r24, r28
    1324:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN13LiquidCrystal7commandEh>
    1328:	6f 85       	ldd	r22, Y+15	; 0x0f
    132a:	60 62       	ori	r22, 0x20	; 32
    132c:	ce 01       	movw	r24, r28
    132e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN13LiquidCrystal7commandEh>
    1332:	84 e0       	ldi	r24, 0x04	; 4
    1334:	88 8b       	std	Y+16, r24	; 0x10
    1336:	ce 01       	movw	r24, r28
    1338:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN13LiquidCrystal7displayEv>
    133c:	ce 01       	movw	r24, r28
    133e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN13LiquidCrystal5clearEv>
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	89 8b       	std	Y+17, r24	; 0x11
    1346:	66 e0       	ldi	r22, 0x06	; 6
    1348:	ce 01       	movw	r24, r28
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <_ZN13LiquidCrystal7commandEh>

0000135a <_ZN13LiquidCrystalC1Ehhhhhh>:
    135a:	cf 92       	push	r12
    135c:	ef 92       	push	r14
    135e:	0f 93       	push	r16
    1360:	fc 01       	movw	r30, r24
    1362:	13 82       	std	Z+3, r1	; 0x03
    1364:	12 82       	std	Z+2, r1	; 0x02
    1366:	88 e9       	ldi	r24, 0x98	; 152
    1368:	92 e0       	ldi	r25, 0x02	; 2
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    136e:	64 83       	std	Z+4, r22	; 0x04
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	85 83       	std	Z+5, r24	; 0x05
    1374:	46 83       	std	Z+6, r20	; 0x06
    1376:	27 83       	std	Z+7, r18	; 0x07
    1378:	00 87       	std	Z+8, r16	; 0x08
    137a:	e1 86       	std	Z+9, r14	; 0x09
    137c:	c2 86       	std	Z+10, r12	; 0x0a
    137e:	13 86       	std	Z+11, r1	; 0x0b
    1380:	14 86       	std	Z+12, r1	; 0x0c
    1382:	15 86       	std	Z+13, r1	; 0x0d
    1384:	16 86       	std	Z+14, r1	; 0x0e
    1386:	17 86       	std	Z+15, r1	; 0x0f
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	60 e1       	ldi	r22, 0x10	; 16
    138e:	cf 01       	movw	r24, r30
    1390:	0f 91       	pop	r16
    1392:	ef 90       	pop	r14
    1394:	cf 90       	pop	r12
    1396:	0c 94 08 09 	jmp	0x1210	; 0x1210 <_ZN13LiquidCrystal5beginEhhh>

0000139a <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	08 95       	ret

000013a6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    13a6:	08 95       	ret

000013a8 <__gesf2>:
    13a8:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_cmp>
    13ac:	08 f4       	brcc	.+2      	; 0x13b0 <__gesf2+0x8>
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	08 95       	ret

000013b2 <__udivmodsi4>:
    13b2:	a1 e2       	ldi	r26, 0x21	; 33
    13b4:	1a 2e       	mov	r1, r26
    13b6:	aa 1b       	sub	r26, r26
    13b8:	bb 1b       	sub	r27, r27
    13ba:	fd 01       	movw	r30, r26
    13bc:	0d c0       	rjmp	.+26     	; 0x13d8 <__udivmodsi4_ep>

000013be <__udivmodsi4_loop>:
    13be:	aa 1f       	adc	r26, r26
    13c0:	bb 1f       	adc	r27, r27
    13c2:	ee 1f       	adc	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	a2 17       	cp	r26, r18
    13c8:	b3 07       	cpc	r27, r19
    13ca:	e4 07       	cpc	r30, r20
    13cc:	f5 07       	cpc	r31, r21
    13ce:	20 f0       	brcs	.+8      	; 0x13d8 <__udivmodsi4_ep>
    13d0:	a2 1b       	sub	r26, r18
    13d2:	b3 0b       	sbc	r27, r19
    13d4:	e4 0b       	sbc	r30, r20
    13d6:	f5 0b       	sbc	r31, r21

000013d8 <__udivmodsi4_ep>:
    13d8:	66 1f       	adc	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	1a 94       	dec	r1
    13e2:	69 f7       	brne	.-38     	; 0x13be <__udivmodsi4_loop>
    13e4:	60 95       	com	r22
    13e6:	70 95       	com	r23
    13e8:	80 95       	com	r24
    13ea:	90 95       	com	r25
    13ec:	9b 01       	movw	r18, r22
    13ee:	ac 01       	movw	r20, r24
    13f0:	bd 01       	movw	r22, r26
    13f2:	cf 01       	movw	r24, r30
    13f4:	08 95       	ret

000013f6 <__divmodsi4>:
    13f6:	05 2e       	mov	r0, r21
    13f8:	97 fb       	bst	r25, 7
    13fa:	1e f4       	brtc	.+6      	; 0x1402 <__divmodsi4+0xc>
    13fc:	00 94       	com	r0
    13fe:	0e 94 12 0a 	call	0x1424	; 0x1424 <__negsi2>
    1402:	57 fd       	sbrc	r21, 7
    1404:	07 d0       	rcall	.+14     	; 0x1414 <__divmodsi4_neg2>
    1406:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__udivmodsi4>
    140a:	07 fc       	sbrc	r0, 7
    140c:	03 d0       	rcall	.+6      	; 0x1414 <__divmodsi4_neg2>
    140e:	4e f4       	brtc	.+18     	; 0x1422 <__divmodsi4_exit>
    1410:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__negsi2>

00001414 <__divmodsi4_neg2>:
    1414:	50 95       	com	r21
    1416:	40 95       	com	r20
    1418:	30 95       	com	r19
    141a:	21 95       	neg	r18
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	4f 4f       	sbci	r20, 0xFF	; 255
    1420:	5f 4f       	sbci	r21, 0xFF	; 255

00001422 <__divmodsi4_exit>:
    1422:	08 95       	ret

00001424 <__negsi2>:
    1424:	90 95       	com	r25
    1426:	80 95       	com	r24
    1428:	70 95       	com	r23
    142a:	61 95       	neg	r22
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	8f 4f       	sbci	r24, 0xFF	; 255
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	08 95       	ret

00001434 <__tablejump2__>:
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	05 90       	lpm	r0, Z+
    143a:	f4 91       	lpm	r31, Z
    143c:	e0 2d       	mov	r30, r0
    143e:	09 94       	ijmp

00001440 <_exit>:
    1440:	f8 94       	cli

00001442 <__stop_program>:
    1442:	ff cf       	rjmp	.-2      	; 0x1442 <__stop_program>
