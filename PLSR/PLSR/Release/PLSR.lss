
PLSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000169a  0000172e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000169a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800150  00800150  0000177e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e5c  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001721  00000000  00000000  000089b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dfd  00000000  00000000  0000a0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a54  00000000  00000000  0000bed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002278  00000000  00000000  0000c928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004446  00000000  00000000  0000eba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00012fe6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      40:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_16>
      44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	44 4f       	sbci	r20, 0xF4	; 244
      6a:	4e 45       	sbci	r20, 0x5E	; 94
      6c:	21 00       	.word	0x0021	; ????

0000006e <_ZZ14handleButtonOKvE3__c_4>:
      6e:	20 20 20 20 20 20 20 20 20 20 00                              .

00000079 <_ZZ14handleButtonOKvE3__c_3>:
      79:	20 73 65 63 00                                       sec.

0000007e <_ZZ14handleButtonOKvE3__c_2>:
      7e:	61 66 74 65 72 20 00                                after .

00000085 <_ZZ14handleButtonOKvE3__c_1>:
      85:	43 61 6e 63 65 6c 65 64 21 00                       Canceled!.

0000008f <_ZZ14handleButtonOKvE3__c_0>:
      8f:	20 20 20 20 20 20 20 20 20 20 20 00                            .

0000009b <_ZZ14handleButtonOKvE3__c>:
      9b:	45 78 70 6f 73 69 6e 67 2e 2e 2e 00                 Exposing....

000000a7 <_ZZ14renderMainMenuvE3__c>:
      a7:	54 69 6d 65 3a 00                                   Time:.

000000ad <_ZZ5setupE3__c>:
      ad:	50 4c 53 52 20 00                                   PLSR .

000000b3 <digital_pin_to_timer_PGM>:
      b3:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      c3:	00 00 00 00                                         ....

000000c7 <digital_pin_to_bit_mask_PGM>:
      c7:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d7:	04 08 10 20                                         ... 

000000db <digital_pin_to_port_PGM>:
      db:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      eb:	03 03 03 03                                         ....

000000ef <port_to_input_PGM>:
      ef:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f9 <port_to_output_PGM>:
      f9:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000103 <port_to_mode_PGM>:
     103:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000010e <__ctors_start>:
     10e:	72 03       	mulsu	r23, r18

00000110 <__ctors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf ef       	ldi	r28, 0xFF	; 255
     116:	d8 e0       	ldi	r29, 0x08	; 8
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	11 e0       	ldi	r17, 0x01	; 1
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	ea e9       	ldi	r30, 0x9A	; 154
     124:	f6 e1       	ldi	r31, 0x16	; 22
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a0 35       	cpi	r26, 0x50	; 80
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
     132:	21 e0       	ldi	r18, 0x01	; 1
     134:	a0 e5       	ldi	r26, 0x50	; 80
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	a4 37       	cpi	r26, 0x74	; 116
     13e:	b2 07       	cpc	r27, r18
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>

00000142 <__do_global_ctors>:
     142:	10 e0       	ldi	r17, 0x00	; 0
     144:	c8 e8       	ldi	r28, 0x88	; 136
     146:	d0 e0       	ldi	r29, 0x00	; 0
     148:	04 c0       	rjmp	.+8      	; 0x152 <__do_global_ctors+0x10>
     14a:	21 97       	sbiw	r28, 0x01	; 1
     14c:	fe 01       	movw	r30, r28
     14e:	0e 94 45 0b 	call	0x168a	; 0x168a <__tablejump2__>
     152:	c7 38       	cpi	r28, 0x87	; 135
     154:	d1 07       	cpc	r29, r17
     156:	c9 f7       	brne	.-14     	; 0x14a <__do_global_ctors+0x8>
     158:	0e 94 93 05 	call	0xb26	; 0xb26 <main>
     15c:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <_exit>

00000160 <__bad_interrupt>:
     160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <_Z14renderMainMenuv>:
	long timeStart = millis();
	while(digitalRead(btn) && (millis() - timeStart) < timeout);
	int output = millis() - timeStart;
	if(output >= timeout) return -1;
	return output;
}
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <REenable>
     16a:	83 e5       	ldi	r24, 0x53	; 83
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN13LiquidCrystal5clearEv>
     172:	40 e0       	ldi	r20, 0x00	; 0
     174:	65 e0       	ldi	r22, 0x05	; 5
     176:	83 e5       	ldi	r24, 0x53	; 83
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
     17e:	67 ea       	ldi	r22, 0xA7	; 167
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	83 e5       	ldi	r24, 0x53	; 83
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e2       	ldi	r20, 0x20	; 32
     190:	51 e4       	ldi	r21, 0x41	; 65
     192:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <selectedTime>
     196:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <selectedTime+0x1>
     19a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <selectedTime+0x2>
     19e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <selectedTime+0x3>
     1a2:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__cmpsf2>
     1a6:	68 2f       	mov	r22, r24
     1a8:	66 1f       	adc	r22, r22
     1aa:	66 27       	eor	r22, r22
     1ac:	66 1f       	adc	r22, r22
     1ae:	6b 5f       	subi	r22, 0xFB	; 251
     1b0:	41 e0       	ldi	r20, 0x01	; 1
     1b2:	83 e5       	ldi	r24, 0x53	; 83
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
     1ba:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <selectedTime>
     1be:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <selectedTime+0x1>
     1c2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <selectedTime+0x2>
     1c6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <selectedTime+0x3>
     1ca:	22 e0       	ldi	r18, 0x02	; 2
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	83 e5       	ldi	r24, 0x53	; 83
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	0c 94 49 07 	jmp	0xe92	; 0xe92 <_ZN5Print5printEdi>

000001d6 <setup>:
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	80 e1       	ldi	r24, 0x10	; 16
     1da:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	8f e0       	ldi	r24, 0x0F	; 15
     1e2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	8e e0       	ldi	r24, 0x0E	; 14
     1ea:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	81 e1       	ldi	r24, 0x11	; 17
     1f2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	81 e1       	ldi	r24, 0x11	; 17
     1fa:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	89 e0       	ldi	r24, 0x09	; 9
     202:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	44 e0       	ldi	r20, 0x04	; 4
     212:	60 e1       	ldi	r22, 0x10	; 16
     214:	83 e5       	ldi	r24, 0x53	; 83
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN13LiquidCrystal5beginEhhh>
     21c:	40 e0       	ldi	r20, 0x00	; 0
     21e:	64 e0       	ldi	r22, 0x04	; 4
     220:	83 e5       	ldi	r24, 0x53	; 83
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
     228:	6d ea       	ldi	r22, 0xAD	; 173
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	83 e5       	ldi	r24, 0x53	; 83
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
     234:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     238:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     23c:	83 e5       	ldi	r24, 0x53	; 83
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 09 06 	call	0xc12	; 0xc12 <_ZN5Print5printEPKc>
     244:	6c ed       	ldi	r22, 0xDC	; 220
     246:	75 e0       	ldi	r23, 0x05	; 5
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <delay>
     250:	83 e5       	ldi	r24, 0x53	; 83
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN13LiquidCrystal5clearEv>
     258:	0c 94 b2 00 	jmp	0x164	; 0x164 <_Z14renderMainMenuv>

0000025c <_Z13rotaryHandlerv>:
/************************************************************************/
/*                            Rotary Handler                            */
/************************************************************************/


void rotaryHandler(){
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
	char result = rotary.process();
     264:	80 e5       	ldi	r24, 0x50	; 80
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN6Rotary7processEv>
	if(!result) return;
     26c:	88 23       	and	r24, r24
     26e:	09 f4       	brne	.+2      	; 0x272 <_Z13rotaryHandlerv+0x16>
     270:	7b c0       	rjmp	.+246    	; 0x368 <_Z13rotaryHandlerv+0x10c>
     272:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <selectedTime>
     276:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <selectedTime+0x1>
     27a:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <selectedTime+0x2>
     27e:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <selectedTime+0x3>
	bool CW = (result ==DIR_CW);
	if(CW){
		if(selectedTime < 10)	selectedTime += 0.5;
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e2       	ldi	r20, 0x20	; 32
     288:	51 e4       	ldi	r21, 0x41	; 65

void rotaryHandler(){
	char result = rotary.process();
	if(!result) return;
	bool CW = (result ==DIR_CW);
	if(CW){
     28a:	80 31       	cpi	r24, 0x10	; 16
     28c:	81 f5       	brne	.+96     	; 0x2ee <_Z13rotaryHandlerv+0x92>
		if(selectedTime < 10)	selectedTime += 0.5;
     28e:	c7 01       	movw	r24, r14
     290:	b6 01       	movw	r22, r12
     292:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__cmpsf2>
     296:	87 ff       	sbrs	r24, 7
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <_Z13rotaryHandlerv+0x48>
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e3       	ldi	r21, 0x3F	; 63
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <_Z13rotaryHandlerv+0x50>
		else selectedTime += 1;
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	40 e8       	ldi	r20, 0x80	; 128
     2aa:	5f e3       	ldi	r21, 0x3F	; 63
     2ac:	c7 01       	movw	r24, r14
     2ae:	b6 01       	movw	r22, r12
     2b0:	0e 94 8b 03 	call	0x716	; 0x716 <__addsf3>
     2b4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <selectedTime>
     2b8:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <selectedTime+0x1>
     2bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <selectedTime+0x2>
     2c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <selectedTime+0x3>
		
		if(selectedTime >= time_maximum) selectedTime = time_maximum;
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	46 e1       	ldi	r20, 0x16	; 22
     2ca:	53 e4       	ldi	r21, 0x43	; 67
     2cc:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <selectedTime>
     2d0:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <selectedTime+0x1>
     2d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <selectedTime+0x2>
     2d8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <selectedTime+0x3>
     2dc:	0e 94 20 05 	call	0xa40	; 0xa40 <__gesf2>
     2e0:	87 fd       	sbrc	r24, 7
     2e2:	3c c0       	rjmp	.+120    	; 0x35c <_Z13rotaryHandlerv+0x100>
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	a6 e1       	ldi	r26, 0x16	; 22
     2ea:	b3 e4       	ldi	r27, 0x43	; 67
     2ec:	2f c0       	rjmp	.+94     	; 0x34c <_Z13rotaryHandlerv+0xf0>
		
	}
	else{ //CCW
		
		if(selectedTime <= 10)	selectedTime -= 0.5;
     2ee:	c7 01       	movw	r24, r14
     2f0:	b6 01       	movw	r22, r12
     2f2:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__cmpsf2>
     2f6:	18 16       	cp	r1, r24
     2f8:	2c f0       	brlt	.+10     	; 0x304 <_Z13rotaryHandlerv+0xa8>
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	5f e3       	ldi	r21, 0x3F	; 63
     302:	04 c0       	rjmp	.+8      	; 0x30c <_Z13rotaryHandlerv+0xb0>
		else selectedTime -= 1;
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 e8       	ldi	r20, 0x80	; 128
     30a:	5f e3       	ldi	r21, 0x3F	; 63
     30c:	c7 01       	movw	r24, r14
     30e:	b6 01       	movw	r22, r12
     310:	0e 94 8a 03 	call	0x714	; 0x714 <__subsf3>
     314:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <selectedTime>
     318:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <selectedTime+0x1>
     31c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <selectedTime+0x2>
     320:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <selectedTime+0x3>
		
		if(selectedTime <= time_minimum) selectedTime = time_minimum;
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <selectedTime>
     330:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <selectedTime+0x1>
     334:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <selectedTime+0x2>
     338:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <selectedTime+0x3>
     33c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__cmpsf2>
     340:	18 16       	cp	r1, r24
     342:	64 f0       	brlt	.+24     	; 0x35c <_Z13rotaryHandlerv+0x100>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	a0 e0       	ldi	r26, 0x00	; 0
     34a:	bf e3       	ldi	r27, 0x3F	; 63
     34c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <selectedTime>
     350:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <selectedTime+0x1>
     354:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <selectedTime+0x2>
     358:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <selectedTime+0x3>
	}
	renderMainMenu();
}
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	df 90       	pop	r13
     362:	cf 90       	pop	r12
		if(selectedTime <= 10)	selectedTime -= 0.5;
		else selectedTime -= 1;
		
		if(selectedTime <= time_minimum) selectedTime = time_minimum;
	}
	renderMainMenu();
     364:	0c 94 b2 00 	jmp	0x164	; 0x164 <_Z14renderMainMenuv>
}
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	08 95       	ret

00000372 <_Z14handleButtonOKv>:

/************************************************************************/
/*                      Handle OK Button Pressed                        */
/************************************************************************/

void handleButtonOK(){
     372:	4f 92       	push	r4
     374:	5f 92       	push	r5
     376:	6f 92       	push	r6
     378:	7f 92       	push	r7
     37a:	8f 92       	push	r8
     37c:	9f 92       	push	r9
     37e:	af 92       	push	r10
     380:	bf 92       	push	r11
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
	if(digitalRead(BTN_OK)){
     38e:	8f e0       	ldi	r24, 0x0F	; 15
     390:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     394:	89 2b       	or	r24, r25
     396:	09 f4       	brne	.+2      	; 0x39a <_Z14handleButtonOKv+0x28>
     398:	32 c1       	rjmp	.+612    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
		//When OK button pressed
		long timeStart = millis();
     39a:	0e 94 95 07 	call	0xf2a	; 0xf2a <millis>
     39e:	4b 01       	movw	r8, r22
     3a0:	5c 01       	movw	r10, r24
		REenable = false;
     3a2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <REenable>
		
		//Turn relay on
		digitalWrite(RELAY,0);
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	81 e1       	ldi	r24, 0x11	; 17
     3aa:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
		
		lcd.clear();
     3ae:	83 e5       	ldi	r24, 0x53	; 83
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(3,0);
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	63 e0       	ldi	r22, 0x03	; 3
     3ba:	83 e5       	ldi	r24, 0x53	; 83
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print(F("Exposing..."));
     3c2:	6b e9       	ldi	r22, 0x9B	; 155
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	83 e5       	ldi	r24, 0x53	; 83
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
		
		while((millis() - timeStart) <= (selectedTime * 1000)){
     3ce:	0e 94 95 07 	call	0xf2a	; 0xf2a <millis>
     3d2:	68 19       	sub	r22, r8
     3d4:	79 09       	sbc	r23, r9
     3d6:	8a 09       	sbc	r24, r10
     3d8:	9b 09       	sbc	r25, r11
     3da:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__floatunsisf>
     3de:	6b 01       	movw	r12, r22
     3e0:	7c 01       	movw	r14, r24
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	4a e7       	ldi	r20, 0x7A	; 122
     3e8:	54 e4       	ldi	r21, 0x44	; 68
     3ea:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <selectedTime>
     3ee:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <selectedTime+0x1>
     3f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <selectedTime+0x2>
     3f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <selectedTime+0x3>
     3fa:	0e 94 25 05 	call	0xa4a	; 0xa4a <__mulsf3>
     3fe:	9b 01       	movw	r18, r22
     400:	ac 01       	movw	r20, r24
     402:	c7 01       	movw	r24, r14
     404:	b6 01       	movw	r22, r12
     406:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__cmpsf2>
     40a:	18 16       	cp	r1, r24
     40c:	0c f4       	brge	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	c8 c0       	rjmp	.+400    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			
			if(digitalRead(BTN_RST)){
     410:	80 e1       	ldi	r24, 0x10	; 16
     412:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     416:	89 2b       	or	r24, r25
     418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	72 c0       	rjmp	.+228    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
				//Check if user tries to cancel
				digitalWrite(RELAY,1);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	81 e1       	ldi	r24, 0x11	; 17
     420:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
				lcd.setCursor(3,0);
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	63 e0       	ldi	r22, 0x03	; 3
     428:	83 e5       	ldi	r24, 0x53	; 83
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(F("           "));
     430:	6f e8       	ldi	r22, 0x8F	; 143
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	83 e5       	ldi	r24, 0x53	; 83
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.setCursor(3,0);
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	63 e0       	ldi	r22, 0x03	; 3
     440:	83 e5       	ldi	r24, 0x53	; 83
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(F("Canceled!"));
     448:	65 e8       	ldi	r22, 0x85	; 133
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	83 e5       	ldi	r24, 0x53	; 83
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.setCursor(1,1);
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	83 e5       	ldi	r24, 0x53	; 83
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
				lcd.print(F("after "));
     460:	6e e7       	ldi	r22, 0x7E	; 126
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	83 e5       	ldi	r24, 0x53	; 83
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.print((millis() - timeStart) / 1000.0,2);
     46c:	0e 94 95 07 	call	0xf2a	; 0xf2a <millis>
     470:	68 19       	sub	r22, r8
     472:	79 09       	sbc	r23, r9
     474:	8a 09       	sbc	r24, r10
     476:	9b 09       	sbc	r25, r11
     478:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__floatunsisf>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	4a e7       	ldi	r20, 0x7A	; 122
     482:	54 e4       	ldi	r21, 0x44	; 68
     484:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__divsf3>
     488:	ab 01       	movw	r20, r22
     48a:	bc 01       	movw	r22, r24
     48c:	22 e0       	ldi	r18, 0x02	; 2
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	83 e5       	ldi	r24, 0x53	; 83
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN5Print5printEdi>
				lcd.print(F(" sec"));
     498:	69 e7       	ldi	r22, 0x79	; 121
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	83 e5       	ldi	r24, 0x53	; 83
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
				delay(500);
     4a4:	64 ef       	ldi	r22, 0xF4	; 244
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 c6 07 	call	0xf8c	; 0xf8c <delay>
     4b0:	ce ee       	ldi	r28, 0xEE	; 238
     4b2:	d2 e0       	ldi	r29, 0x02	; 2
				
				//Check if user tries to skip "Canceled" page
				for(int i =0; i < 1500 ;i+=2){
					delay(2);
     4b4:	62 e0       	ldi	r22, 0x02	; 2
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <delay>
					if(digitalRead(BTN_RST) || digitalRead(BTN_OK) || digitalRead(BTN_TOGGLE)) break;
     4c0:	80 e1       	ldi	r24, 0x10	; 16
     4c2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     4c6:	89 2b       	or	r24, r25
     4c8:	59 f4       	brne	.+22     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4ca:	8f e0       	ldi	r24, 0x0F	; 15
     4cc:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     4d0:	89 2b       	or	r24, r25
     4d2:	31 f4       	brne	.+12     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4d4:	8e e0       	ldi	r24, 0x0E	; 14
     4d6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     4da:	89 2b       	or	r24, r25
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4de:	7b c0       	rjmp	.+246    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
				}
				while(digitalRead(BTN_RST) || digitalRead(BTN_OK) || digitalRead(BTN_TOGGLE)); //Wait for all buttons to release
     4e0:	80 e1       	ldi	r24, 0x10	; 16
     4e2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     4e6:	89 2b       	or	r24, r25
     4e8:	d9 f7       	brne	.-10     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4ea:	8f e0       	ldi	r24, 0x0F	; 15
     4ec:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     4f0:	89 2b       	or	r24, r25
     4f2:	b1 f7       	brne	.-20     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4f4:	8e e0       	ldi	r24, 0x0E	; 14
     4f6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     4fa:	89 2b       	or	r24, r25
     4fc:	89 f7       	brne	.-30     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4fe:	6f c0       	rjmp	.+222    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
				renderMainMenu();
				return;
			}
			else{
				//No special command, continue display exposing status
				long timePassed = (millis() - timeStart);
     500:	0e 94 95 07 	call	0xf2a	; 0xf2a <millis>
     504:	6b 01       	movw	r12, r22
     506:	7c 01       	movw	r14, r24
     508:	c8 18       	sub	r12, r8
     50a:	d9 08       	sbc	r13, r9
     50c:	ea 08       	sbc	r14, r10
     50e:	fb 08       	sbc	r15, r11
				if(timePassed % 100 == 0){
     510:	c7 01       	movw	r24, r14
     512:	b6 01       	movw	r22, r12
     514:	24 e6       	ldi	r18, 0x64	; 100
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	0e 94 26 0b 	call	0x164c	; 0x164c <__divmodsi4>
     520:	67 2b       	or	r22, r23
     522:	68 2b       	or	r22, r24
     524:	69 2b       	or	r22, r25
     526:	09 f0       	breq	.+2      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     528:	52 cf       	rjmp	.-348    	; 0x3ce <_Z14handleButtonOKv+0x5c>
					lcd.setCursor(6,1);
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	66 e0       	ldi	r22, 0x06	; 6
     52e:	83 e5       	ldi	r24, 0x53	; 83
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
					lcd.print(F("          "));
     536:	6e e6       	ldi	r22, 0x6E	; 110
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	83 e5       	ldi	r24, 0x53	; 83
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
					lcd.setCursor(6,1);
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	66 e0       	ldi	r22, 0x06	; 6
     546:	83 e5       	ldi	r24, 0x53	; 83
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
					
					lcd.print((double) (((selectedTime * 1000) - timePassed) / 1000.0), 1);
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	4a e7       	ldi	r20, 0x7A	; 122
     554:	54 e4       	ldi	r21, 0x44	; 68
     556:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <selectedTime>
     55a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <selectedTime+0x1>
     55e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <selectedTime+0x2>
     562:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <selectedTime+0x3>
     566:	0e 94 25 05 	call	0xa4a	; 0xa4a <__mulsf3>
     56a:	2b 01       	movw	r4, r22
     56c:	3c 01       	movw	r6, r24
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__floatsisf>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	c3 01       	movw	r24, r6
     57c:	b2 01       	movw	r22, r4
     57e:	0e 94 8a 03 	call	0x714	; 0x714 <__subsf3>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	4a e7       	ldi	r20, 0x7A	; 122
     588:	54 e4       	ldi	r21, 0x44	; 68
     58a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__divsf3>
     58e:	ab 01       	movw	r20, r22
     590:	bc 01       	movw	r22, r24
     592:	21 e0       	ldi	r18, 0x01	; 1
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	83 e5       	ldi	r24, 0x53	; 83
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN5Print5printEdi>
     59e:	17 cf       	rjmp	.-466    	; 0x3ce <_Z14handleButtonOKv+0x5c>
				}
			}
		}
		digitalWrite(RELAY,1);
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	81 e1       	ldi	r24, 0x11	; 17
     5a4:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
		
		lcd.clear();
     5a8:	83 e5       	ldi	r24, 0x53	; 83
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(5,0);
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	65 e0       	ldi	r22, 0x05	; 5
     5b4:	83 e5       	ldi	r24, 0x53	; 83
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print(F("DONE!"));
     5bc:	68 e6       	ldi	r22, 0x68	; 104
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	83 e5       	ldi	r24, 0x53	; 83
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN5Print5printEPK19__FlashStringHelper>
		
		delay(1000);
     5c8:	68 ee       	ldi	r22, 0xE8	; 232
     5ca:	73 e0       	ldi	r23, 0x03	; 3
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <delay>
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5d6:	21 97       	sbiw	r28, 0x01	; 1
				lcd.print((millis() - timeStart) / 1000.0,2);
				lcd.print(F(" sec"));
				delay(500);
				
				//Check if user tries to skip "Canceled" page
				for(int i =0; i < 1500 ;i+=2){
     5d8:	09 f0       	breq	.+2      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5da:	6c cf       	rjmp	.-296    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     5dc:	81 cf       	rjmp	.-254    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		delay(1000);
		
		renderMainMenu();
		
	}
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	bf 90       	pop	r11
     5ec:	af 90       	pop	r10
     5ee:	9f 90       	pop	r9
     5f0:	8f 90       	pop	r8
     5f2:	7f 90       	pop	r7
     5f4:	6f 90       	pop	r6
     5f6:	5f 90       	pop	r5
     5f8:	4f 90       	pop	r4
					delay(2);
					if(digitalRead(BTN_RST) || digitalRead(BTN_OK) || digitalRead(BTN_TOGGLE)) break;
				}
				while(digitalRead(BTN_RST) || digitalRead(BTN_OK) || digitalRead(BTN_TOGGLE)); //Wait for all buttons to release
				
				renderMainMenu();
     5fa:	0c 94 b2 00 	jmp	0x164	; 0x164 <_Z14renderMainMenuv>
		delay(1000);
		
		renderMainMenu();
		
	}
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	9f 90       	pop	r9
     610:	8f 90       	pop	r8
     612:	7f 90       	pop	r7
     614:	6f 90       	pop	r6
     616:	5f 90       	pop	r5
     618:	4f 90       	pop	r4
     61a:	08 95       	ret

0000061c <_Z18handleButtonTOGGLEv>:
/************************************************************************/
/*                           Handle Toggle                              */
/************************************************************************/

void handleButtonTOGGLE(){
	if(!digitalRead(BTN_TOGGLE))	return;
     61c:	8e e0       	ldi	r24, 0x0E	; 14
     61e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     622:	89 2b       	or	r24, r25
     624:	e9 f1       	breq	.+122    	; 0x6a0 <_Z18handleButtonTOGGLEv+0x84>
	REenable = false; //Disable Rotary encoder
     626:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <REenable>
	digitalWrite(RELAY,0);
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	81 e1       	ldi	r24, 0x11	; 17
     62e:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
	lcd.clear();
     632:	83 e5       	ldi	r24, 0x53	; 83
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN13LiquidCrystal5clearEv>
	lcd.setCursor(2,0);
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	62 e0       	ldi	r22, 0x02	; 2
     63e:	83 e5       	ldi	r24, 0x53	; 83
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("...BYPASS...");
     646:	67 e0       	ldi	r22, 0x07	; 7
     648:	71 e0       	ldi	r23, 0x01	; 1
     64a:	83 e5       	ldi	r24, 0x53	; 83
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 09 06 	call	0xc12	; 0xc12 <_ZN5Print5printEPKc>
	
	while(digitalRead(BTN_TOGGLE));
     652:	8e e0       	ldi	r24, 0x0E	; 14
     654:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     658:	89 2b       	or	r24, r25
     65a:	d9 f7       	brne	.-10     	; 0x652 <_Z18handleButtonTOGGLEv+0x36>
	while(!(digitalRead(BTN_TOGGLE) || digitalRead(BTN_RST)));
     65c:	8e e0       	ldi	r24, 0x0E	; 14
     65e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     662:	89 2b       	or	r24, r25
     664:	29 f4       	brne	.+10     	; 0x670 <_Z18handleButtonTOGGLEv+0x54>
     666:	80 e1       	ldi	r24, 0x10	; 16
     668:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     66c:	89 2b       	or	r24, r25
     66e:	b1 f3       	breq	.-20     	; 0x65c <_Z18handleButtonTOGGLEv+0x40>
	
	digitalWrite(RELAY,1);
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	81 e1       	ldi	r24, 0x11	; 17
     674:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
	renderMainMenu();
     678:	0e 94 b2 00 	call	0x164	; 0x164 <_Z14renderMainMenuv>
	
	while(digitalRead(BTN_RST) || digitalRead(BTN_OK) || digitalRead(BTN_TOGGLE)); //Wait for all buttons to release
     67c:	80 e1       	ldi	r24, 0x10	; 16
     67e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     682:	89 2b       	or	r24, r25
     684:	d9 f7       	brne	.-10     	; 0x67c <_Z18handleButtonTOGGLEv+0x60>
     686:	8f e0       	ldi	r24, 0x0F	; 15
     688:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     68c:	89 2b       	or	r24, r25
     68e:	b1 f7       	brne	.-20     	; 0x67c <_Z18handleButtonTOGGLEv+0x60>
     690:	8e e0       	ldi	r24, 0x0E	; 14
     692:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     696:	89 2b       	or	r24, r25
     698:	89 f7       	brne	.-30     	; 0x67c <_Z18handleButtonTOGGLEv+0x60>
	
	REenable = true;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <REenable>
     6a0:	08 95       	ret

000006a2 <_Z17handleButtonRESETv>:
/************************************************************************/
/*                          Handle Reset Button                         */
/************************************************************************/

void handleButtonRESET(){
	if(!digitalRead(BTN_RST)) return;
     6a2:	80 e1       	ldi	r24, 0x10	; 16
     6a4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     6a8:	89 2b       	or	r24, r25
     6aa:	99 f0       	breq	.+38     	; 0x6d2 <_Z17handleButtonRESETv+0x30>
	selectedTime = 8.0;
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	a0 e0       	ldi	r26, 0x00	; 0
     6b2:	b1 e4       	ldi	r27, 0x41	; 65
     6b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <selectedTime>
     6b8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <selectedTime+0x1>
     6bc:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <selectedTime+0x2>
     6c0:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <selectedTime+0x3>
	renderMainMenu();
     6c4:	0e 94 b2 00 	call	0x164	; 0x164 <_Z14renderMainMenuv>
	while(digitalRead(BTN_RST));
     6c8:	80 e1       	ldi	r24, 0x10	; 16
     6ca:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
     6ce:	89 2b       	or	r24, r25
     6d0:	d9 f7       	brne	.-10     	; 0x6c8 <_Z17handleButtonRESETv+0x26>
     6d2:	08 95       	ret

000006d4 <loop>:

/************************************************************************/
/*                             Main loop                                */
/************************************************************************/
void loop() {
	handleButtonOK();
     6d4:	0e 94 b9 01 	call	0x372	; 0x372 <_Z14handleButtonOKv>
	handleButtonTOGGLE();
     6d8:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z18handleButtonTOGGLEv>
	handleButtonRESET();
     6dc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z17handleButtonRESETv>
	rotaryHandler();
     6e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_Z13rotaryHandlerv>

000006e4 <_GLOBAL__sub_I_lcd>:
     6e4:	cf 92       	push	r12
     6e6:	ef 92       	push	r14
     6e8:	0f 93       	push	r16

#include <LiquidCrystal.h>
#include <Rotary.h>
#include <EEPROM.h>

LiquidCrystal lcd(8, 3, 4, 5, 6, 7);
     6ea:	87 e0       	ldi	r24, 0x07	; 7
     6ec:	c8 2e       	mov	r12, r24
     6ee:	96 e0       	ldi	r25, 0x06	; 6
     6f0:	e9 2e       	mov	r14, r25
     6f2:	05 e0       	ldi	r16, 0x05	; 5
     6f4:	24 e0       	ldi	r18, 0x04	; 4
     6f6:	43 e0       	ldi	r20, 0x03	; 3
     6f8:	68 e0       	ldi	r22, 0x08	; 8
     6fa:	83 e5       	ldi	r24, 0x53	; 83
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 6f 0a 	call	0x14de	; 0x14de <_ZN13LiquidCrystalC1Ehhhhhh>
Rotary rotary(2,9);
     702:	49 e0       	ldi	r20, 0x09	; 9
     704:	62 e0       	ldi	r22, 0x02	; 2
     706:	80 e5       	ldi	r24, 0x50	; 80
     708:	91 e0       	ldi	r25, 0x01	; 1
void loop() {
	handleButtonOK();
	handleButtonTOGGLE();
	handleButtonRESET();
	rotaryHandler();
     70a:	0f 91       	pop	r16
     70c:	ef 90       	pop	r14
     70e:	cf 90       	pop	r12
#include <LiquidCrystal.h>
#include <Rotary.h>
#include <EEPROM.h>

LiquidCrystal lcd(8, 3, 4, 5, 6, 7);
Rotary rotary(2,9);
     710:	0c 94 95 0a 	jmp	0x152a	; 0x152a <_ZN6RotaryC1Ecc>

00000714 <__subsf3>:
     714:	50 58       	subi	r21, 0x80	; 128

00000716 <__addsf3>:
     716:	bb 27       	eor	r27, r27
     718:	aa 27       	eor	r26, r26
     71a:	0e 94 a2 03 	call	0x744	; 0x744 <__addsf3x>
     71e:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_round>
     722:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__fp_pscA>
     726:	38 f0       	brcs	.+14     	; 0x736 <__addsf3+0x20>
     728:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_pscB>
     72c:	20 f0       	brcs	.+8      	; 0x736 <__addsf3+0x20>
     72e:	39 f4       	brne	.+14     	; 0x73e <__addsf3+0x28>
     730:	9f 3f       	cpi	r25, 0xFF	; 255
     732:	19 f4       	brne	.+6      	; 0x73a <__addsf3+0x24>
     734:	26 f4       	brtc	.+8      	; 0x73e <__addsf3+0x28>
     736:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_nan>
     73a:	0e f4       	brtc	.+2      	; 0x73e <__addsf3+0x28>
     73c:	e0 95       	com	r30
     73e:	e7 fb       	bst	r30, 7
     740:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_inf>

00000744 <__addsf3x>:
     744:	e9 2f       	mov	r30, r25
     746:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_split3>
     74a:	58 f3       	brcs	.-42     	; 0x722 <__addsf3+0xc>
     74c:	ba 17       	cp	r27, r26
     74e:	62 07       	cpc	r22, r18
     750:	73 07       	cpc	r23, r19
     752:	84 07       	cpc	r24, r20
     754:	95 07       	cpc	r25, r21
     756:	20 f0       	brcs	.+8      	; 0x760 <__addsf3x+0x1c>
     758:	79 f4       	brne	.+30     	; 0x778 <__addsf3x+0x34>
     75a:	a6 f5       	brtc	.+104    	; 0x7c4 <__addsf3x+0x80>
     75c:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_zero>
     760:	0e f4       	brtc	.+2      	; 0x764 <__addsf3x+0x20>
     762:	e0 95       	com	r30
     764:	0b 2e       	mov	r0, r27
     766:	ba 2f       	mov	r27, r26
     768:	a0 2d       	mov	r26, r0
     76a:	0b 01       	movw	r0, r22
     76c:	b9 01       	movw	r22, r18
     76e:	90 01       	movw	r18, r0
     770:	0c 01       	movw	r0, r24
     772:	ca 01       	movw	r24, r20
     774:	a0 01       	movw	r20, r0
     776:	11 24       	eor	r1, r1
     778:	ff 27       	eor	r31, r31
     77a:	59 1b       	sub	r21, r25
     77c:	99 f0       	breq	.+38     	; 0x7a4 <__addsf3x+0x60>
     77e:	59 3f       	cpi	r21, 0xF9	; 249
     780:	50 f4       	brcc	.+20     	; 0x796 <__addsf3x+0x52>
     782:	50 3e       	cpi	r21, 0xE0	; 224
     784:	68 f1       	brcs	.+90     	; 0x7e0 <__addsf3x+0x9c>
     786:	1a 16       	cp	r1, r26
     788:	f0 40       	sbci	r31, 0x00	; 0
     78a:	a2 2f       	mov	r26, r18
     78c:	23 2f       	mov	r18, r19
     78e:	34 2f       	mov	r19, r20
     790:	44 27       	eor	r20, r20
     792:	58 5f       	subi	r21, 0xF8	; 248
     794:	f3 cf       	rjmp	.-26     	; 0x77c <__addsf3x+0x38>
     796:	46 95       	lsr	r20
     798:	37 95       	ror	r19
     79a:	27 95       	ror	r18
     79c:	a7 95       	ror	r26
     79e:	f0 40       	sbci	r31, 0x00	; 0
     7a0:	53 95       	inc	r21
     7a2:	c9 f7       	brne	.-14     	; 0x796 <__addsf3x+0x52>
     7a4:	7e f4       	brtc	.+30     	; 0x7c4 <__addsf3x+0x80>
     7a6:	1f 16       	cp	r1, r31
     7a8:	ba 0b       	sbc	r27, r26
     7aa:	62 0b       	sbc	r22, r18
     7ac:	73 0b       	sbc	r23, r19
     7ae:	84 0b       	sbc	r24, r20
     7b0:	ba f0       	brmi	.+46     	; 0x7e0 <__addsf3x+0x9c>
     7b2:	91 50       	subi	r25, 0x01	; 1
     7b4:	a1 f0       	breq	.+40     	; 0x7de <__addsf3x+0x9a>
     7b6:	ff 0f       	add	r31, r31
     7b8:	bb 1f       	adc	r27, r27
     7ba:	66 1f       	adc	r22, r22
     7bc:	77 1f       	adc	r23, r23
     7be:	88 1f       	adc	r24, r24
     7c0:	c2 f7       	brpl	.-16     	; 0x7b2 <__addsf3x+0x6e>
     7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <__addsf3x+0x9c>
     7c4:	ba 0f       	add	r27, r26
     7c6:	62 1f       	adc	r22, r18
     7c8:	73 1f       	adc	r23, r19
     7ca:	84 1f       	adc	r24, r20
     7cc:	48 f4       	brcc	.+18     	; 0x7e0 <__addsf3x+0x9c>
     7ce:	87 95       	ror	r24
     7d0:	77 95       	ror	r23
     7d2:	67 95       	ror	r22
     7d4:	b7 95       	ror	r27
     7d6:	f7 95       	ror	r31
     7d8:	9e 3f       	cpi	r25, 0xFE	; 254
     7da:	08 f0       	brcs	.+2      	; 0x7de <__addsf3x+0x9a>
     7dc:	b0 cf       	rjmp	.-160    	; 0x73e <__addsf3+0x28>
     7de:	93 95       	inc	r25
     7e0:	88 0f       	add	r24, r24
     7e2:	08 f0       	brcs	.+2      	; 0x7e6 <__addsf3x+0xa2>
     7e4:	99 27       	eor	r25, r25
     7e6:	ee 0f       	add	r30, r30
     7e8:	97 95       	ror	r25
     7ea:	87 95       	ror	r24
     7ec:	08 95       	ret

000007ee <__cmpsf2>:
     7ee:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_cmp>
     7f2:	08 f4       	brcc	.+2      	; 0x7f6 <__cmpsf2+0x8>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	08 95       	ret

000007f8 <__divsf3>:
     7f8:	0e 94 10 04 	call	0x820	; 0x820 <__divsf3x>
     7fc:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_round>
     800:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_pscB>
     804:	58 f0       	brcs	.+22     	; 0x81c <__divsf3+0x24>
     806:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__fp_pscA>
     80a:	40 f0       	brcs	.+16     	; 0x81c <__divsf3+0x24>
     80c:	29 f4       	brne	.+10     	; 0x818 <__divsf3+0x20>
     80e:	5f 3f       	cpi	r21, 0xFF	; 255
     810:	29 f0       	breq	.+10     	; 0x81c <__divsf3+0x24>
     812:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_inf>
     816:	51 11       	cpse	r21, r1
     818:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_szero>
     81c:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_nan>

00000820 <__divsf3x>:
     820:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_split3>
     824:	68 f3       	brcs	.-38     	; 0x800 <__divsf3+0x8>

00000826 <__divsf3_pse>:
     826:	99 23       	and	r25, r25
     828:	b1 f3       	breq	.-20     	; 0x816 <__divsf3+0x1e>
     82a:	55 23       	and	r21, r21
     82c:	91 f3       	breq	.-28     	; 0x812 <__divsf3+0x1a>
     82e:	95 1b       	sub	r25, r21
     830:	55 0b       	sbc	r21, r21
     832:	bb 27       	eor	r27, r27
     834:	aa 27       	eor	r26, r26
     836:	62 17       	cp	r22, r18
     838:	73 07       	cpc	r23, r19
     83a:	84 07       	cpc	r24, r20
     83c:	38 f0       	brcs	.+14     	; 0x84c <__divsf3_pse+0x26>
     83e:	9f 5f       	subi	r25, 0xFF	; 255
     840:	5f 4f       	sbci	r21, 0xFF	; 255
     842:	22 0f       	add	r18, r18
     844:	33 1f       	adc	r19, r19
     846:	44 1f       	adc	r20, r20
     848:	aa 1f       	adc	r26, r26
     84a:	a9 f3       	breq	.-22     	; 0x836 <__divsf3_pse+0x10>
     84c:	35 d0       	rcall	.+106    	; 0x8b8 <__divsf3_pse+0x92>
     84e:	0e 2e       	mov	r0, r30
     850:	3a f0       	brmi	.+14     	; 0x860 <__divsf3_pse+0x3a>
     852:	e0 e8       	ldi	r30, 0x80	; 128
     854:	32 d0       	rcall	.+100    	; 0x8ba <__divsf3_pse+0x94>
     856:	91 50       	subi	r25, 0x01	; 1
     858:	50 40       	sbci	r21, 0x00	; 0
     85a:	e6 95       	lsr	r30
     85c:	00 1c       	adc	r0, r0
     85e:	ca f7       	brpl	.-14     	; 0x852 <__divsf3_pse+0x2c>
     860:	2b d0       	rcall	.+86     	; 0x8b8 <__divsf3_pse+0x92>
     862:	fe 2f       	mov	r31, r30
     864:	29 d0       	rcall	.+82     	; 0x8b8 <__divsf3_pse+0x92>
     866:	66 0f       	add	r22, r22
     868:	77 1f       	adc	r23, r23
     86a:	88 1f       	adc	r24, r24
     86c:	bb 1f       	adc	r27, r27
     86e:	26 17       	cp	r18, r22
     870:	37 07       	cpc	r19, r23
     872:	48 07       	cpc	r20, r24
     874:	ab 07       	cpc	r26, r27
     876:	b0 e8       	ldi	r27, 0x80	; 128
     878:	09 f0       	breq	.+2      	; 0x87c <__divsf3_pse+0x56>
     87a:	bb 0b       	sbc	r27, r27
     87c:	80 2d       	mov	r24, r0
     87e:	bf 01       	movw	r22, r30
     880:	ff 27       	eor	r31, r31
     882:	93 58       	subi	r25, 0x83	; 131
     884:	5f 4f       	sbci	r21, 0xFF	; 255
     886:	3a f0       	brmi	.+14     	; 0x896 <__divsf3_pse+0x70>
     888:	9e 3f       	cpi	r25, 0xFE	; 254
     88a:	51 05       	cpc	r21, r1
     88c:	78 f0       	brcs	.+30     	; 0x8ac <__divsf3_pse+0x86>
     88e:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_inf>
     892:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_szero>
     896:	5f 3f       	cpi	r21, 0xFF	; 255
     898:	e4 f3       	brlt	.-8      	; 0x892 <__divsf3_pse+0x6c>
     89a:	98 3e       	cpi	r25, 0xE8	; 232
     89c:	d4 f3       	brlt	.-12     	; 0x892 <__divsf3_pse+0x6c>
     89e:	86 95       	lsr	r24
     8a0:	77 95       	ror	r23
     8a2:	67 95       	ror	r22
     8a4:	b7 95       	ror	r27
     8a6:	f7 95       	ror	r31
     8a8:	9f 5f       	subi	r25, 0xFF	; 255
     8aa:	c9 f7       	brne	.-14     	; 0x89e <__divsf3_pse+0x78>
     8ac:	88 0f       	add	r24, r24
     8ae:	91 1d       	adc	r25, r1
     8b0:	96 95       	lsr	r25
     8b2:	87 95       	ror	r24
     8b4:	97 f9       	bld	r25, 7
     8b6:	08 95       	ret
     8b8:	e1 e0       	ldi	r30, 0x01	; 1
     8ba:	66 0f       	add	r22, r22
     8bc:	77 1f       	adc	r23, r23
     8be:	88 1f       	adc	r24, r24
     8c0:	bb 1f       	adc	r27, r27
     8c2:	62 17       	cp	r22, r18
     8c4:	73 07       	cpc	r23, r19
     8c6:	84 07       	cpc	r24, r20
     8c8:	ba 07       	cpc	r27, r26
     8ca:	20 f0       	brcs	.+8      	; 0x8d4 <__divsf3_pse+0xae>
     8cc:	62 1b       	sub	r22, r18
     8ce:	73 0b       	sbc	r23, r19
     8d0:	84 0b       	sbc	r24, r20
     8d2:	ba 0b       	sbc	r27, r26
     8d4:	ee 1f       	adc	r30, r30
     8d6:	88 f7       	brcc	.-30     	; 0x8ba <__divsf3_pse+0x94>
     8d8:	e0 95       	com	r30
     8da:	08 95       	ret

000008dc <__floatunsisf>:
     8dc:	e8 94       	clt
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <__floatsisf+0x12>

000008e0 <__floatsisf>:
     8e0:	97 fb       	bst	r25, 7
     8e2:	3e f4       	brtc	.+14     	; 0x8f2 <__floatsisf+0x12>
     8e4:	90 95       	com	r25
     8e6:	80 95       	com	r24
     8e8:	70 95       	com	r23
     8ea:	61 95       	neg	r22
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
     8ee:	8f 4f       	sbci	r24, 0xFF	; 255
     8f0:	9f 4f       	sbci	r25, 0xFF	; 255
     8f2:	99 23       	and	r25, r25
     8f4:	a9 f0       	breq	.+42     	; 0x920 <__stack+0x21>
     8f6:	f9 2f       	mov	r31, r25
     8f8:	96 e9       	ldi	r25, 0x96	; 150
     8fa:	bb 27       	eor	r27, r27
     8fc:	93 95       	inc	r25
     8fe:	f6 95       	lsr	r31
     900:	87 95       	ror	r24
     902:	77 95       	ror	r23
     904:	67 95       	ror	r22
     906:	b7 95       	ror	r27
     908:	f1 11       	cpse	r31, r1
     90a:	f8 cf       	rjmp	.-16     	; 0x8fc <__floatsisf+0x1c>
     90c:	fa f4       	brpl	.+62     	; 0x94c <__stack+0x4d>
     90e:	bb 0f       	add	r27, r27
     910:	11 f4       	brne	.+4      	; 0x916 <__stack+0x17>
     912:	60 ff       	sbrs	r22, 0
     914:	1b c0       	rjmp	.+54     	; 0x94c <__stack+0x4d>
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	8f 4f       	sbci	r24, 0xFF	; 255
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	16 c0       	rjmp	.+44     	; 0x94c <__stack+0x4d>
     920:	88 23       	and	r24, r24
     922:	11 f0       	breq	.+4      	; 0x928 <__stack+0x29>
     924:	96 e9       	ldi	r25, 0x96	; 150
     926:	11 c0       	rjmp	.+34     	; 0x94a <__stack+0x4b>
     928:	77 23       	and	r23, r23
     92a:	21 f0       	breq	.+8      	; 0x934 <__stack+0x35>
     92c:	9e e8       	ldi	r25, 0x8E	; 142
     92e:	87 2f       	mov	r24, r23
     930:	76 2f       	mov	r23, r22
     932:	05 c0       	rjmp	.+10     	; 0x93e <__stack+0x3f>
     934:	66 23       	and	r22, r22
     936:	71 f0       	breq	.+28     	; 0x954 <__stack+0x55>
     938:	96 e8       	ldi	r25, 0x86	; 134
     93a:	86 2f       	mov	r24, r22
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	2a f0       	brmi	.+10     	; 0x94c <__stack+0x4d>
     942:	9a 95       	dec	r25
     944:	66 0f       	add	r22, r22
     946:	77 1f       	adc	r23, r23
     948:	88 1f       	adc	r24, r24
     94a:	da f7       	brpl	.-10     	; 0x942 <__stack+0x43>
     94c:	88 0f       	add	r24, r24
     94e:	96 95       	lsr	r25
     950:	87 95       	ror	r24
     952:	97 f9       	bld	r25, 7
     954:	08 95       	ret

00000956 <__fp_cmp>:
     956:	99 0f       	add	r25, r25
     958:	00 08       	sbc	r0, r0
     95a:	55 0f       	add	r21, r21
     95c:	aa 0b       	sbc	r26, r26
     95e:	e0 e8       	ldi	r30, 0x80	; 128
     960:	fe ef       	ldi	r31, 0xFE	; 254
     962:	16 16       	cp	r1, r22
     964:	17 06       	cpc	r1, r23
     966:	e8 07       	cpc	r30, r24
     968:	f9 07       	cpc	r31, r25
     96a:	c0 f0       	brcs	.+48     	; 0x99c <__fp_cmp+0x46>
     96c:	12 16       	cp	r1, r18
     96e:	13 06       	cpc	r1, r19
     970:	e4 07       	cpc	r30, r20
     972:	f5 07       	cpc	r31, r21
     974:	98 f0       	brcs	.+38     	; 0x99c <__fp_cmp+0x46>
     976:	62 1b       	sub	r22, r18
     978:	73 0b       	sbc	r23, r19
     97a:	84 0b       	sbc	r24, r20
     97c:	95 0b       	sbc	r25, r21
     97e:	39 f4       	brne	.+14     	; 0x98e <__fp_cmp+0x38>
     980:	0a 26       	eor	r0, r26
     982:	61 f0       	breq	.+24     	; 0x99c <__fp_cmp+0x46>
     984:	23 2b       	or	r18, r19
     986:	24 2b       	or	r18, r20
     988:	25 2b       	or	r18, r21
     98a:	21 f4       	brne	.+8      	; 0x994 <__fp_cmp+0x3e>
     98c:	08 95       	ret
     98e:	0a 26       	eor	r0, r26
     990:	09 f4       	brne	.+2      	; 0x994 <__fp_cmp+0x3e>
     992:	a1 40       	sbci	r26, 0x01	; 1
     994:	a6 95       	lsr	r26
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	81 1d       	adc	r24, r1
     99a:	81 1d       	adc	r24, r1
     99c:	08 95       	ret

0000099e <__fp_inf>:
     99e:	97 f9       	bld	r25, 7
     9a0:	9f 67       	ori	r25, 0x7F	; 127
     9a2:	80 e8       	ldi	r24, 0x80	; 128
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	08 95       	ret

000009aa <__fp_nan>:
     9aa:	9f ef       	ldi	r25, 0xFF	; 255
     9ac:	80 ec       	ldi	r24, 0xC0	; 192
     9ae:	08 95       	ret

000009b0 <__fp_pscA>:
     9b0:	00 24       	eor	r0, r0
     9b2:	0a 94       	dec	r0
     9b4:	16 16       	cp	r1, r22
     9b6:	17 06       	cpc	r1, r23
     9b8:	18 06       	cpc	r1, r24
     9ba:	09 06       	cpc	r0, r25
     9bc:	08 95       	ret

000009be <__fp_pscB>:
     9be:	00 24       	eor	r0, r0
     9c0:	0a 94       	dec	r0
     9c2:	12 16       	cp	r1, r18
     9c4:	13 06       	cpc	r1, r19
     9c6:	14 06       	cpc	r1, r20
     9c8:	05 06       	cpc	r0, r21
     9ca:	08 95       	ret

000009cc <__fp_round>:
     9cc:	09 2e       	mov	r0, r25
     9ce:	03 94       	inc	r0
     9d0:	00 0c       	add	r0, r0
     9d2:	11 f4       	brne	.+4      	; 0x9d8 <__fp_round+0xc>
     9d4:	88 23       	and	r24, r24
     9d6:	52 f0       	brmi	.+20     	; 0x9ec <__fp_round+0x20>
     9d8:	bb 0f       	add	r27, r27
     9da:	40 f4       	brcc	.+16     	; 0x9ec <__fp_round+0x20>
     9dc:	bf 2b       	or	r27, r31
     9de:	11 f4       	brne	.+4      	; 0x9e4 <__fp_round+0x18>
     9e0:	60 ff       	sbrs	r22, 0
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <__fp_round+0x20>
     9e4:	6f 5f       	subi	r22, 0xFF	; 255
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
     9e8:	8f 4f       	sbci	r24, 0xFF	; 255
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	08 95       	ret

000009ee <__fp_split3>:
     9ee:	57 fd       	sbrc	r21, 7
     9f0:	90 58       	subi	r25, 0x80	; 128
     9f2:	44 0f       	add	r20, r20
     9f4:	55 1f       	adc	r21, r21
     9f6:	59 f0       	breq	.+22     	; 0xa0e <__fp_splitA+0x10>
     9f8:	5f 3f       	cpi	r21, 0xFF	; 255
     9fa:	71 f0       	breq	.+28     	; 0xa18 <__fp_splitA+0x1a>
     9fc:	47 95       	ror	r20

000009fe <__fp_splitA>:
     9fe:	88 0f       	add	r24, r24
     a00:	97 fb       	bst	r25, 7
     a02:	99 1f       	adc	r25, r25
     a04:	61 f0       	breq	.+24     	; 0xa1e <__fp_splitA+0x20>
     a06:	9f 3f       	cpi	r25, 0xFF	; 255
     a08:	79 f0       	breq	.+30     	; 0xa28 <__fp_splitA+0x2a>
     a0a:	87 95       	ror	r24
     a0c:	08 95       	ret
     a0e:	12 16       	cp	r1, r18
     a10:	13 06       	cpc	r1, r19
     a12:	14 06       	cpc	r1, r20
     a14:	55 1f       	adc	r21, r21
     a16:	f2 cf       	rjmp	.-28     	; 0x9fc <__fp_split3+0xe>
     a18:	46 95       	lsr	r20
     a1a:	f1 df       	rcall	.-30     	; 0x9fe <__fp_splitA>
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <__fp_splitA+0x30>
     a1e:	16 16       	cp	r1, r22
     a20:	17 06       	cpc	r1, r23
     a22:	18 06       	cpc	r1, r24
     a24:	99 1f       	adc	r25, r25
     a26:	f1 cf       	rjmp	.-30     	; 0xa0a <__fp_splitA+0xc>
     a28:	86 95       	lsr	r24
     a2a:	71 05       	cpc	r23, r1
     a2c:	61 05       	cpc	r22, r1
     a2e:	08 94       	sec
     a30:	08 95       	ret

00000a32 <__fp_zero>:
     a32:	e8 94       	clt

00000a34 <__fp_szero>:
     a34:	bb 27       	eor	r27, r27
     a36:	66 27       	eor	r22, r22
     a38:	77 27       	eor	r23, r23
     a3a:	cb 01       	movw	r24, r22
     a3c:	97 f9       	bld	r25, 7
     a3e:	08 95       	ret

00000a40 <__gesf2>:
     a40:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_cmp>
     a44:	08 f4       	brcc	.+2      	; 0xa48 <__gesf2+0x8>
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	08 95       	ret

00000a4a <__mulsf3>:
     a4a:	0e 94 38 05 	call	0xa70	; 0xa70 <__mulsf3x>
     a4e:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_round>
     a52:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__fp_pscA>
     a56:	38 f0       	brcs	.+14     	; 0xa66 <__mulsf3+0x1c>
     a58:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_pscB>
     a5c:	20 f0       	brcs	.+8      	; 0xa66 <__mulsf3+0x1c>
     a5e:	95 23       	and	r25, r21
     a60:	11 f0       	breq	.+4      	; 0xa66 <__mulsf3+0x1c>
     a62:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_inf>
     a66:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_nan>
     a6a:	11 24       	eor	r1, r1
     a6c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_szero>

00000a70 <__mulsf3x>:
     a70:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_split3>
     a74:	70 f3       	brcs	.-36     	; 0xa52 <__mulsf3+0x8>

00000a76 <__mulsf3_pse>:
     a76:	95 9f       	mul	r25, r21
     a78:	c1 f3       	breq	.-16     	; 0xa6a <__mulsf3+0x20>
     a7a:	95 0f       	add	r25, r21
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	55 1f       	adc	r21, r21
     a80:	62 9f       	mul	r22, r18
     a82:	f0 01       	movw	r30, r0
     a84:	72 9f       	mul	r23, r18
     a86:	bb 27       	eor	r27, r27
     a88:	f0 0d       	add	r31, r0
     a8a:	b1 1d       	adc	r27, r1
     a8c:	63 9f       	mul	r22, r19
     a8e:	aa 27       	eor	r26, r26
     a90:	f0 0d       	add	r31, r0
     a92:	b1 1d       	adc	r27, r1
     a94:	aa 1f       	adc	r26, r26
     a96:	64 9f       	mul	r22, r20
     a98:	66 27       	eor	r22, r22
     a9a:	b0 0d       	add	r27, r0
     a9c:	a1 1d       	adc	r26, r1
     a9e:	66 1f       	adc	r22, r22
     aa0:	82 9f       	mul	r24, r18
     aa2:	22 27       	eor	r18, r18
     aa4:	b0 0d       	add	r27, r0
     aa6:	a1 1d       	adc	r26, r1
     aa8:	62 1f       	adc	r22, r18
     aaa:	73 9f       	mul	r23, r19
     aac:	b0 0d       	add	r27, r0
     aae:	a1 1d       	adc	r26, r1
     ab0:	62 1f       	adc	r22, r18
     ab2:	83 9f       	mul	r24, r19
     ab4:	a0 0d       	add	r26, r0
     ab6:	61 1d       	adc	r22, r1
     ab8:	22 1f       	adc	r18, r18
     aba:	74 9f       	mul	r23, r20
     abc:	33 27       	eor	r19, r19
     abe:	a0 0d       	add	r26, r0
     ac0:	61 1d       	adc	r22, r1
     ac2:	23 1f       	adc	r18, r19
     ac4:	84 9f       	mul	r24, r20
     ac6:	60 0d       	add	r22, r0
     ac8:	21 1d       	adc	r18, r1
     aca:	82 2f       	mov	r24, r18
     acc:	76 2f       	mov	r23, r22
     ace:	6a 2f       	mov	r22, r26
     ad0:	11 24       	eor	r1, r1
     ad2:	9f 57       	subi	r25, 0x7F	; 127
     ad4:	50 40       	sbci	r21, 0x00	; 0
     ad6:	9a f0       	brmi	.+38     	; 0xafe <__mulsf3_pse+0x88>
     ad8:	f1 f0       	breq	.+60     	; 0xb16 <__mulsf3_pse+0xa0>
     ada:	88 23       	and	r24, r24
     adc:	4a f0       	brmi	.+18     	; 0xaf0 <__mulsf3_pse+0x7a>
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	bb 1f       	adc	r27, r27
     ae4:	66 1f       	adc	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	88 1f       	adc	r24, r24
     aea:	91 50       	subi	r25, 0x01	; 1
     aec:	50 40       	sbci	r21, 0x00	; 0
     aee:	a9 f7       	brne	.-22     	; 0xada <__mulsf3_pse+0x64>
     af0:	9e 3f       	cpi	r25, 0xFE	; 254
     af2:	51 05       	cpc	r21, r1
     af4:	80 f0       	brcs	.+32     	; 0xb16 <__mulsf3_pse+0xa0>
     af6:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_inf>
     afa:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_szero>
     afe:	5f 3f       	cpi	r21, 0xFF	; 255
     b00:	e4 f3       	brlt	.-8      	; 0xafa <__mulsf3_pse+0x84>
     b02:	98 3e       	cpi	r25, 0xE8	; 232
     b04:	d4 f3       	brlt	.-12     	; 0xafa <__mulsf3_pse+0x84>
     b06:	86 95       	lsr	r24
     b08:	77 95       	ror	r23
     b0a:	67 95       	ror	r22
     b0c:	b7 95       	ror	r27
     b0e:	f7 95       	ror	r31
     b10:	e7 95       	ror	r30
     b12:	9f 5f       	subi	r25, 0xFF	; 255
     b14:	c1 f7       	brne	.-16     	; 0xb06 <__mulsf3_pse+0x90>
     b16:	fe 2b       	or	r31, r30
     b18:	88 0f       	add	r24, r24
     b1a:	91 1d       	adc	r25, r1
     b1c:	96 95       	lsr	r25
     b1e:	87 95       	ror	r24
     b20:	97 f9       	bld	r25, 7
     b22:	08 95       	ret

00000b24 <initVariant>:
     b24:	08 95       	ret

00000b26 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     b26:	0e 94 0d 08 	call	0x101a	; 0x101a <init>

	initVariant();
     b2a:	0e 94 92 05 	call	0xb24	; 0xb24 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     b2e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b32:	c0 e0       	ldi	r28, 0x00	; 0
     b34:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     b36:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <loop>
		if (serialEventRun) serialEventRun();
     b3a:	20 97       	sbiw	r28, 0x00	; 0
     b3c:	e1 f3       	breq	.-8      	; 0xb36 <main+0x10>
     b3e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     b42:	f9 cf       	rjmp	.-14     	; 0xb36 <main+0x10>

00000b44 <_ZN5Print17availableForWriteEv>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	08 95       	ret

00000b4a <_ZN5Print5flushEv>:
     b4a:	08 95       	ret

00000b4c <_ZN5Print5writeEPKhj>:
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	6c 01       	movw	r12, r24
     b5e:	7a 01       	movw	r14, r20
     b60:	8b 01       	movw	r16, r22
     b62:	c0 e0       	ldi	r28, 0x00	; 0
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	ce 15       	cp	r28, r14
     b68:	df 05       	cpc	r29, r15
     b6a:	81 f0       	breq	.+32     	; 0xb8c <_ZN5Print5writeEPKhj+0x40>
     b6c:	d8 01       	movw	r26, r16
     b6e:	6d 91       	ld	r22, X+
     b70:	8d 01       	movw	r16, r26
     b72:	d6 01       	movw	r26, r12
     b74:	ed 91       	ld	r30, X+
     b76:	fc 91       	ld	r31, X
     b78:	01 90       	ld	r0, Z+
     b7a:	f0 81       	ld	r31, Z
     b7c:	e0 2d       	mov	r30, r0
     b7e:	c6 01       	movw	r24, r12
     b80:	09 95       	icall
     b82:	89 2b       	or	r24, r25
     b84:	11 f0       	breq	.+4      	; 0xb8a <_ZN5Print5writeEPKhj+0x3e>
     b86:	21 96       	adiw	r28, 0x01	; 1
     b88:	ee cf       	rjmp	.-36     	; 0xb66 <_ZN5Print5writeEPKhj+0x1a>
     b8a:	7e 01       	movw	r14, r28
     b8c:	c7 01       	movw	r24, r14
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	08 95       	ret

00000ba0 <_ZN5Print5writeEPKc>:
     ba0:	61 15       	cp	r22, r1
     ba2:	71 05       	cpc	r23, r1
     ba4:	79 f0       	breq	.+30     	; 0xbc4 <_ZN5Print5writeEPKc+0x24>
     ba6:	fb 01       	movw	r30, r22
     ba8:	01 90       	ld	r0, Z+
     baa:	00 20       	and	r0, r0
     bac:	e9 f7       	brne	.-6      	; 0xba8 <_ZN5Print5writeEPKc+0x8>
     bae:	31 97       	sbiw	r30, 0x01	; 1
     bb0:	af 01       	movw	r20, r30
     bb2:	46 1b       	sub	r20, r22
     bb4:	57 0b       	sbc	r21, r23
     bb6:	dc 01       	movw	r26, r24
     bb8:	ed 91       	ld	r30, X+
     bba:	fc 91       	ld	r31, X
     bbc:	02 80       	ldd	r0, Z+2	; 0x02
     bbe:	f3 81       	ldd	r31, Z+3	; 0x03
     bc0:	e0 2d       	mov	r30, r0
     bc2:	09 94       	ijmp
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	08 95       	ret

00000bca <_ZN5Print5printEPK19__FlashStringHelper>:
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	8c 01       	movw	r16, r24
     bd8:	7b 01       	movw	r14, r22
     bda:	c0 e0       	ldi	r28, 0x00	; 0
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
     bde:	f7 01       	movw	r30, r14
     be0:	ec 0f       	add	r30, r28
     be2:	fd 1f       	adc	r31, r29
     be4:	64 91       	lpm	r22, Z
     be6:	66 23       	and	r22, r22
     be8:	61 f0       	breq	.+24     	; 0xc02 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     bea:	d8 01       	movw	r26, r16
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	01 90       	ld	r0, Z+
     bf2:	f0 81       	ld	r31, Z
     bf4:	e0 2d       	mov	r30, r0
     bf6:	c8 01       	movw	r24, r16
     bf8:	09 95       	icall
     bfa:	89 2b       	or	r24, r25
     bfc:	11 f0       	breq	.+4      	; 0xc02 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     bfe:	21 96       	adiw	r28, 0x01	; 1
     c00:	ee cf       	rjmp	.-36     	; 0xbde <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     c02:	ce 01       	movw	r24, r28
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	08 95       	ret

00000c12 <_ZN5Print5printEPKc>:
     c12:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN5Print5writeEPKc>

00000c16 <_ZN5Print5printEc>:
     c16:	dc 01       	movw	r26, r24
     c18:	ed 91       	ld	r30, X+
     c1a:	fc 91       	ld	r31, X
     c1c:	01 90       	ld	r0, Z+
     c1e:	f0 81       	ld	r31, Z
     c20:	e0 2d       	mov	r30, r0
     c22:	09 94       	ijmp

00000c24 <_ZN5Print11printNumberEmh>:
     c24:	8f 92       	push	r8
     c26:	9f 92       	push	r9
     c28:	af 92       	push	r10
     c2a:	bf 92       	push	r11
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	a1 97       	sbiw	r28, 0x21	; 33
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	7c 01       	movw	r14, r24
     c4a:	fa 01       	movw	r30, r20
     c4c:	cb 01       	movw	r24, r22
     c4e:	19 a2       	std	Y+33, r1	; 0x21
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	08 f4       	brcc	.+2      	; 0xc56 <_ZN5Print11printNumberEmh+0x32>
     c54:	2a e0       	ldi	r18, 0x0A	; 10
     c56:	8e 01       	movw	r16, r28
     c58:	0f 5d       	subi	r16, 0xDF	; 223
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	82 2e       	mov	r8, r18
     c5e:	91 2c       	mov	r9, r1
     c60:	a1 2c       	mov	r10, r1
     c62:	b1 2c       	mov	r11, r1
     c64:	bf 01       	movw	r22, r30
     c66:	a5 01       	movw	r20, r10
     c68:	94 01       	movw	r18, r8
     c6a:	0e 94 04 0b 	call	0x1608	; 0x1608 <__udivmodsi4>
     c6e:	f9 01       	movw	r30, r18
     c70:	ca 01       	movw	r24, r20
     c72:	01 50       	subi	r16, 0x01	; 1
     c74:	11 09       	sbc	r17, r1
     c76:	6a 30       	cpi	r22, 0x0A	; 10
     c78:	10 f4       	brcc	.+4      	; 0xc7e <_ZN5Print11printNumberEmh+0x5a>
     c7a:	60 5d       	subi	r22, 0xD0	; 208
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <_ZN5Print11printNumberEmh+0x5c>
     c7e:	69 5c       	subi	r22, 0xC9	; 201
     c80:	d8 01       	movw	r26, r16
     c82:	6c 93       	st	X, r22
     c84:	23 2b       	or	r18, r19
     c86:	24 2b       	or	r18, r20
     c88:	25 2b       	or	r18, r21
     c8a:	61 f7       	brne	.-40     	; 0xc64 <_ZN5Print11printNumberEmh+0x40>
     c8c:	b8 01       	movw	r22, r16
     c8e:	c7 01       	movw	r24, r14
     c90:	0e 94 d0 05 	call	0xba0	; 0xba0 <_ZN5Print5writeEPKc>
     c94:	a1 96       	adiw	r28, 0x21	; 33
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	bf 90       	pop	r11
     cae:	af 90       	pop	r10
     cb0:	9f 90       	pop	r9
     cb2:	8f 90       	pop	r8
     cb4:	08 95       	ret

00000cb6 <_ZN5Print5printEmi>:
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	41 f4       	brne	.+16     	; 0xccc <_ZN5Print5printEmi+0x16>
     cbc:	dc 01       	movw	r26, r24
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	01 90       	ld	r0, Z+
     cc4:	f0 81       	ld	r31, Z
     cc6:	e0 2d       	mov	r30, r0
     cc8:	64 2f       	mov	r22, r20
     cca:	09 94       	ijmp
     ccc:	0c 94 12 06 	jmp	0xc24	; 0xc24 <_ZN5Print11printNumberEmh>

00000cd0 <_ZN5Print5printEji>:
     cd0:	9a 01       	movw	r18, r20
     cd2:	ab 01       	movw	r20, r22
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_ZN5Print5printEmi>

00000cdc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     cdc:	7f 92       	push	r7
     cde:	8f 92       	push	r8
     ce0:	9f 92       	push	r9
     ce2:	af 92       	push	r10
     ce4:	bf 92       	push	r11
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	8c 01       	movw	r16, r24
     cf8:	6a 01       	movw	r12, r20
     cfa:	7b 01       	movw	r14, r22
     cfc:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     cfe:	9a 01       	movw	r18, r20
     d00:	ab 01       	movw	r20, r22
     d02:	c7 01       	movw	r24, r14
     d04:	b6 01       	movw	r22, r12
     d06:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__unordsf2>
     d0a:	88 23       	and	r24, r24
     d0c:	19 f0       	breq	.+6      	; 0xd14 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d0e:	6c e1       	ldi	r22, 0x1C	; 28
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	27 c0       	rjmp	.+78     	; 0xd62 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     d14:	46 01       	movw	r8, r12
     d16:	57 01       	movw	r10, r14
     d18:	e8 94       	clt
     d1a:	b7 f8       	bld	r11, 7
     d1c:	2f ef       	ldi	r18, 0xFF	; 255
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	4f e7       	ldi	r20, 0x7F	; 127
     d22:	5f e7       	ldi	r21, 0x7F	; 127
     d24:	c5 01       	movw	r24, r10
     d26:	b4 01       	movw	r22, r8
     d28:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__unordsf2>
     d2c:	81 11       	cpse	r24, r1
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <_ZN5Print10printFloatEdh+0x6e>
     d30:	2f ef       	ldi	r18, 0xFF	; 255
     d32:	3f ef       	ldi	r19, 0xFF	; 255
     d34:	4f e7       	ldi	r20, 0x7F	; 127
     d36:	5f e7       	ldi	r21, 0x7F	; 127
     d38:	c5 01       	movw	r24, r10
     d3a:	b4 01       	movw	r22, r8
     d3c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__cmpsf2>
     d40:	18 16       	cp	r1, r24
     d42:	1c f4       	brge	.+6      	; 0xd4a <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d44:	60 e2       	ldi	r22, 0x20	; 32
     d46:	71 e0       	ldi	r23, 0x01	; 1
     d48:	0c c0       	rjmp	.+24     	; 0xd62 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     d4a:	2f ef       	ldi	r18, 0xFF	; 255
     d4c:	3f ef       	ldi	r19, 0xFF	; 255
     d4e:	4f e7       	ldi	r20, 0x7F	; 127
     d50:	5f e4       	ldi	r21, 0x4F	; 79
     d52:	c7 01       	movw	r24, r14
     d54:	b6 01       	movw	r22, r12
     d56:	0e 94 20 05 	call	0xa40	; 0xa40 <__gesf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	94 f4       	brge	.+36     	; 0xd82 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d5e:	64 e2       	ldi	r22, 0x24	; 36
     d60:	71 e0       	ldi	r23, 0x01	; 1
     d62:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	8f 90       	pop	r8
     d7c:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d7e:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     d82:	2f ef       	ldi	r18, 0xFF	; 255
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	5f ec       	ldi	r21, 0xCF	; 207
     d8a:	c7 01       	movw	r24, r14
     d8c:	b6 01       	movw	r22, r12
     d8e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__cmpsf2>
     d92:	87 fd       	sbrc	r24, 7
     d94:	e4 cf       	rjmp	.-56     	; 0xd5e <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	a9 01       	movw	r20, r18
     d9c:	c7 01       	movw	r24, r14
     d9e:	b6 01       	movw	r22, r12
     da0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__cmpsf2>
     da4:	87 ff       	sbrs	r24, 7
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     da8:	6d e2       	ldi	r22, 0x2D	; 45
     daa:	c8 01       	movw	r24, r16
     dac:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEc>
     db0:	ec 01       	movw	r28, r24
     number = -number;
     db2:	f7 fa       	bst	r15, 7
     db4:	f0 94       	com	r15
     db6:	f7 f8       	bld	r15, 7
     db8:	f0 94       	com	r15
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     dbc:	c0 e0       	ldi	r28, 0x00	; 0
     dbe:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     dc0:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     dca:	7b 14       	cp	r7, r11
     dcc:	41 f0       	breq	.+16     	; 0xdde <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	51 e4       	ldi	r21, 0x41	; 65
     dd6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     dda:	b3 94       	inc	r11
     ddc:	f6 cf       	rjmp	.-20     	; 0xdca <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     dde:	a7 01       	movw	r20, r14
     de0:	96 01       	movw	r18, r12
     de2:	0e 94 8b 03 	call	0x716	; 0x716 <__addsf3>
     de6:	6b 01       	movw	r12, r22
     de8:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     dea:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fixunssfsi>
     dee:	4b 01       	movw	r8, r22
     df0:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     df2:	2a e0       	ldi	r18, 0x0A	; 10
     df4:	ab 01       	movw	r20, r22
     df6:	bc 01       	movw	r22, r24
     df8:	c8 01       	movw	r24, r16
     dfa:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     dfe:	c8 0f       	add	r28, r24
     e00:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     e02:	77 20       	and	r7, r7
     e04:	b9 f1       	breq	.+110    	; 0xe74 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     e06:	c5 01       	movw	r24, r10
     e08:	b4 01       	movw	r22, r8
     e0a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__floatunsisf>
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
     e12:	c7 01       	movw	r24, r14
     e14:	b6 01       	movw	r22, r12
     e16:	0e 94 8a 03 	call	0x714	; 0x714 <__subsf3>
     e1a:	6b 01       	movw	r12, r22
     e1c:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     e1e:	6e e2       	ldi	r22, 0x2E	; 46
     e20:	c8 01       	movw	r24, r16
     e22:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEc>
     e26:	c8 0f       	add	r28, r24
     e28:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	c7 01       	movw	r24, r14
     e34:	b6 01       	movw	r22, r12
     e36:	0e 94 25 05 	call	0xa4a	; 0xa4a <__mulsf3>
     e3a:	4b 01       	movw	r8, r22
     e3c:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     e3e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fixunssfsi>
     e42:	6b 01       	movw	r12, r22
     e44:	7c 01       	movw	r14, r24
    n += print(toPrint);
     e46:	4a e0       	ldi	r20, 0x0A	; 10
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	c8 01       	movw	r24, r16
     e4c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN5Print5printEji>
     e50:	c8 0f       	add	r28, r24
     e52:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     e54:	b6 01       	movw	r22, r12
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__floatunsisf>
     e5e:	9b 01       	movw	r18, r22
     e60:	ac 01       	movw	r20, r24
     e62:	c5 01       	movw	r24, r10
     e64:	b4 01       	movw	r22, r8
     e66:	0e 94 8a 03 	call	0x714	; 0x714 <__subsf3>
     e6a:	6b 01       	movw	r12, r22
     e6c:	7c 01       	movw	r14, r24
     e6e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     e70:	71 10       	cpse	r7, r1
     e72:	db cf       	rjmp	.-74     	; 0xe2a <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     e74:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	9f 90       	pop	r9
     e8c:	8f 90       	pop	r8
     e8e:	7f 90       	pop	r7
     e90:	08 95       	ret

00000e92 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     e92:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <_ZN5Print10printFloatEdh>

00000e96 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     eac:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timer0_millis>
     eb0:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <timer0_millis+0x1>
     eb4:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <timer0_millis+0x2>
     eb8:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     ebc:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     ec0:	23 e0       	ldi	r18, 0x03	; 3
     ec2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     ec4:	2d 37       	cpi	r18, 0x7D	; 125
     ec6:	20 f4       	brcc	.+8      	; 0xed0 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	a1 1d       	adc	r26, r1
     ecc:	b1 1d       	adc	r27, r1
     ece:	05 c0       	rjmp	.+10     	; 0xeda <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     ed0:	26 e8       	ldi	r18, 0x86	; 134
     ed2:	23 0f       	add	r18, r19
		m += 1;
     ed4:	02 96       	adiw	r24, 0x02	; 2
     ed6:	a1 1d       	adc	r26, r1
     ed8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     eda:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <timer0_fract>
	timer0_millis = m;
     ede:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timer0_millis>
     ee2:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <timer0_millis+0x1>
     ee6:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <timer0_millis+0x2>
     eea:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <timer0_millis+0x3>
	timer0_overflow_count++;
     eee:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <timer0_overflow_count>
     ef2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <timer0_overflow_count+0x1>
     ef6:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <timer0_overflow_count+0x2>
     efa:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <timer0_overflow_count+0x3>
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	a1 1d       	adc	r26, r1
     f02:	b1 1d       	adc	r27, r1
     f04:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <timer0_overflow_count>
     f08:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <timer0_overflow_count+0x1>
     f0c:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <timer0_overflow_count+0x2>
     f10:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <timer0_overflow_count+0x3>
}
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	3f 91       	pop	r19
     f1e:	2f 91       	pop	r18
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     f2a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     f2c:	f8 94       	cli
	m = timer0_millis;
     f2e:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <timer0_millis>
     f32:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <timer0_millis+0x1>
     f36:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <timer0_millis+0x2>
     f3a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <timer0_millis+0x3>
	SREG = oldSREG;
     f3e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     f40:	08 95       	ret

00000f42 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f42:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     f44:	f8 94       	cli
	m = timer0_overflow_count;
     f46:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <timer0_overflow_count>
     f4a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <timer0_overflow_count+0x1>
     f4e:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <timer0_overflow_count+0x2>
     f52:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     f56:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     f58:	a8 9b       	sbis	0x15, 0	; 21
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <micros+0x24>
     f5c:	2f 3f       	cpi	r18, 0xFF	; 255
     f5e:	19 f0       	breq	.+6      	; 0xf66 <micros+0x24>
		m++;
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	a1 1d       	adc	r26, r1
     f64:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     f66:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     f68:	ba 2f       	mov	r27, r26
     f6a:	a9 2f       	mov	r26, r25
     f6c:	98 2f       	mov	r25, r24
     f6e:	88 27       	eor	r24, r24
     f70:	82 0f       	add	r24, r18
     f72:	91 1d       	adc	r25, r1
     f74:	a1 1d       	adc	r26, r1
     f76:	b1 1d       	adc	r27, r1
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	42 e0       	ldi	r20, 0x02	; 2
     f7e:	66 0f       	add	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	4a 95       	dec	r20
     f88:	d1 f7       	brne	.-12     	; 0xf7e <micros+0x3c>
}
     f8a:	08 95       	ret

00000f8c <delay>:

void delay(unsigned long ms)
{
     f8c:	8f 92       	push	r8
     f8e:	9f 92       	push	r9
     f90:	af 92       	push	r10
     f92:	bf 92       	push	r11
     f94:	cf 92       	push	r12
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	6b 01       	movw	r12, r22
     f9e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     fa0:	0e 94 a1 07 	call	0xf42	; 0xf42 <micros>
     fa4:	4b 01       	movw	r8, r22
     fa6:	5c 01       	movw	r10, r24

	while (ms > 0) {
     fa8:	c1 14       	cp	r12, r1
     faa:	d1 04       	cpc	r13, r1
     fac:	e1 04       	cpc	r14, r1
     fae:	f1 04       	cpc	r15, r1
     fb0:	01 f1       	breq	.+64     	; 0xff2 <delay+0x66>
		yield();
     fb2:	0e 94 cf 0a 	call	0x159e	; 0x159e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     fb6:	0e 94 a1 07 	call	0xf42	; 0xf42 <micros>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	88 19       	sub	r24, r8
     fc0:	99 09       	sbc	r25, r9
     fc2:	aa 09       	sbc	r26, r10
     fc4:	bb 09       	sbc	r27, r11
     fc6:	88 3e       	cpi	r24, 0xE8	; 232
     fc8:	93 40       	sbci	r25, 0x03	; 3
     fca:	a1 05       	cpc	r26, r1
     fcc:	b1 05       	cpc	r27, r1
     fce:	60 f3       	brcs	.-40     	; 0xfa8 <delay+0x1c>
			ms--;
     fd0:	21 e0       	ldi	r18, 0x01	; 1
     fd2:	c2 1a       	sub	r12, r18
     fd4:	d1 08       	sbc	r13, r1
     fd6:	e1 08       	sbc	r14, r1
     fd8:	f1 08       	sbc	r15, r1
			start += 1000;
     fda:	88 ee       	ldi	r24, 0xE8	; 232
     fdc:	88 0e       	add	r8, r24
     fde:	83 e0       	ldi	r24, 0x03	; 3
     fe0:	98 1e       	adc	r9, r24
     fe2:	a1 1c       	adc	r10, r1
     fe4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     fe6:	c1 14       	cp	r12, r1
     fe8:	d1 04       	cpc	r13, r1
     fea:	e1 04       	cpc	r14, r1
     fec:	f1 04       	cpc	r15, r1
     fee:	19 f7       	brne	.-58     	; 0xfb6 <delay+0x2a>
     ff0:	db cf       	rjmp	.-74     	; 0xfa8 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	9f 90       	pop	r9
    1000:	8f 90       	pop	r8
    1002:	08 95       	ret

00001004 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	91 05       	cpc	r25, r1
    1008:	38 f0       	brcs	.+14     	; 0x1018 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1012:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <delayMicroseconds+0x10>
    1018:	08 95       	ret

0000101a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    101a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    101c:	84 b5       	in	r24, 0x24	; 36
    101e:	82 60       	ori	r24, 0x02	; 2
    1020:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1022:	84 b5       	in	r24, 0x24	; 36
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1028:	85 b5       	in	r24, 0x25	; 37
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    102e:	85 b5       	in	r24, 0x25	; 37
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1034:	ee e6       	ldi	r30, 0x6E	; 110
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    103e:	e1 e8       	ldi	r30, 0x81	; 129
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1044:	80 81       	ld	r24, Z
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    104a:	80 81       	ld	r24, Z
    104c:	81 60       	ori	r24, 0x01	; 1
    104e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1050:	e0 e8       	ldi	r30, 0x80	; 128
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    105a:	e1 eb       	ldi	r30, 0xB1	; 177
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	84 60       	ori	r24, 0x04	; 4
    1062:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1064:	e0 eb       	ldi	r30, 0xB0	; 176
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    106e:	ea e7       	ldi	r30, 0x7A	; 122
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	84 60       	ori	r24, 0x04	; 4
    1076:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1078:	80 81       	ld	r24, Z
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    107e:	80 81       	ld	r24, Z
    1080:	81 60       	ori	r24, 0x01	; 1
    1082:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1084:	80 81       	ld	r24, Z
    1086:	80 68       	ori	r24, 0x80	; 128
    1088:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    108a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    108e:	08 95       	ret

00001090 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	81 f0       	breq	.+32     	; 0x10b4 <turnOffPWM+0x24>
    1094:	28 f4       	brcc	.+10     	; 0x10a0 <turnOffPWM+0x10>
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	99 f0       	breq	.+38     	; 0x10c0 <turnOffPWM+0x30>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	a1 f0       	breq	.+40     	; 0x10c6 <turnOffPWM+0x36>
    109e:	08 95       	ret
    10a0:	87 30       	cpi	r24, 0x07	; 7
    10a2:	a9 f0       	breq	.+42     	; 0x10ce <turnOffPWM+0x3e>
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	b9 f0       	breq	.+46     	; 0x10d6 <turnOffPWM+0x46>
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	d1 f4       	brne	.+52     	; 0x10e0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    10b0:	8f 7d       	andi	r24, 0xDF	; 223
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    10b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    10b8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    10be:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    10c0:	84 b5       	in	r24, 0x24	; 36
    10c2:	8f 77       	andi	r24, 0x7F	; 127
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    10c6:	84 b5       	in	r24, 0x24	; 36
    10c8:	8f 7d       	andi	r24, 0xDF	; 223
    10ca:	84 bd       	out	0x24, r24	; 36
    10cc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    10ce:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    10d2:	8f 77       	andi	r24, 0x7F	; 127
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    10d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    10da:	8f 7d       	andi	r24, 0xDF	; 223
    10dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    10e0:	08 95       	ret

000010e2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	fc 01       	movw	r30, r24
    10ea:	e9 53       	subi	r30, 0x39	; 57
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    10f0:	fc 01       	movw	r30, r24
    10f2:	e5 52       	subi	r30, 0x25	; 37
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    10f8:	88 23       	and	r24, r24
    10fa:	61 f1       	breq	.+88     	; 0x1154 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	fc 01       	movw	r30, r24
    1104:	ed 5f       	subi	r30, 0xFD	; 253
    1106:	fe 4f       	sbci	r31, 0xFE	; 254
    1108:	c5 91       	lpm	r28, Z+
    110a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    110c:	fc 01       	movw	r30, r24
    110e:	e7 50       	subi	r30, 0x07	; 7
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	a5 91       	lpm	r26, Z+
    1114:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1116:	61 11       	cpse	r22, r1
    1118:	09 c0       	rjmp	.+18     	; 0x112c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    111a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    111c:	f8 94       	cli
		*reg &= ~bit;
    111e:	88 81       	ld	r24, Y
    1120:	20 95       	com	r18
    1122:	82 23       	and	r24, r18
    1124:	88 83       	st	Y, r24
		*out &= ~bit;
    1126:	ec 91       	ld	r30, X
    1128:	2e 23       	and	r18, r30
    112a:	0b c0       	rjmp	.+22     	; 0x1142 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    112c:	62 30       	cpi	r22, 0x02	; 2
    112e:	61 f4       	brne	.+24     	; 0x1148 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1130:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1132:	f8 94       	cli
		*reg &= ~bit;
    1134:	88 81       	ld	r24, Y
    1136:	32 2f       	mov	r19, r18
    1138:	30 95       	com	r19
    113a:	83 23       	and	r24, r19
    113c:	88 83       	st	Y, r24
		*out |= bit;
    113e:	ec 91       	ld	r30, X
    1140:	2e 2b       	or	r18, r30
    1142:	2c 93       	st	X, r18
		SREG = oldSREG;
    1144:	9f bf       	out	0x3f, r25	; 63
    1146:	06 c0       	rjmp	.+12     	; 0x1154 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1148:	8f b7       	in	r24, 0x3f	; 63
                cli();
    114a:	f8 94       	cli
		*reg |= bit;
    114c:	e8 81       	ld	r30, Y
    114e:	2e 2b       	or	r18, r30
    1150:	28 83       	st	Y, r18
		SREG = oldSREG;
    1152:	8f bf       	out	0x3f, r24	; 63
	}
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	f9 01       	movw	r30, r18
    1166:	ed 54       	subi	r30, 0x4D	; 77
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    116c:	f9 01       	movw	r30, r18
    116e:	e9 53       	subi	r30, 0x39	; 57
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1174:	f9 01       	movw	r30, r18
    1176:	e5 52       	subi	r30, 0x25	; 37
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    117c:	cc 23       	and	r28, r28
    117e:	c1 f0       	breq	.+48     	; 0x11b0 <digitalWrite+0x56>
    1180:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1182:	81 11       	cpse	r24, r1
    1184:	0e 94 48 08 	call	0x1090	; 0x1090 <turnOffPWM>

	out = portOutputRegister(port);
    1188:	ec 2f       	mov	r30, r28
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	e7 50       	subi	r30, 0x07	; 7
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	a5 91       	lpm	r26, Z+
    1196:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1198:	9f b7       	in	r25, 0x3f	; 63
	cli();
    119a:	f8 94       	cli

	if (val == LOW) {
    119c:	11 11       	cpse	r17, r1
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <digitalWrite+0x4e>
		*out &= ~bit;
    11a0:	8c 91       	ld	r24, X
    11a2:	d0 95       	com	r29
    11a4:	d8 23       	and	r29, r24
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <digitalWrite+0x52>
	} else {
		*out |= bit;
    11a8:	ec 91       	ld	r30, X
    11aa:	de 2b       	or	r29, r30
    11ac:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    11ae:	9f bf       	out	0x3f, r25	; 63
}
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	08 95       	ret

000011b8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	f9 01       	movw	r30, r18
    11c2:	ed 54       	subi	r30, 0x4D	; 77
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11c8:	f9 01       	movw	r30, r18
    11ca:	e9 53       	subi	r30, 0x39	; 57
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11d0:	f9 01       	movw	r30, r18
    11d2:	e5 52       	subi	r30, 0x25	; 37
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    11d8:	cc 23       	and	r28, r28
    11da:	91 f0       	breq	.+36     	; 0x1200 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11dc:	81 11       	cpse	r24, r1
    11de:	0e 94 48 08 	call	0x1090	; 0x1090 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    11e2:	ec 2f       	mov	r30, r28
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	e1 51       	subi	r30, 0x11	; 17
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	a5 91       	lpm	r26, Z+
    11f0:	b4 91       	lpm	r27, Z
    11f2:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    11f4:	ed 23       	and	r30, r29
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	21 f4       	brne	.+8      	; 0x1204 <digitalRead+0x4c>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <digitalRead+0x4c>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	ec 01       	movw	r28, r24
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	8e 81       	ldd	r24, Y+6	; 0x06
    1214:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 02 08 	call	0x1004	; 0x1004 <delayMicroseconds>
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	8e 81       	ldd	r24, Y+6	; 0x06
    1224:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 02 08 	call	0x1004	; 0x1004 <delayMicroseconds>
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
    1234:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    1238:	84 e6       	ldi	r24, 0x64	; 100
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	0c 94 02 08 	jmp	0x1004	; 0x1004 <delayMicroseconds>

00001244 <_ZN13LiquidCrystal10write4bitsEh>:
    1244:	cf 92       	push	r12
    1246:	df 92       	push	r13
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	6c 01       	movw	r12, r24
    1256:	7c 01       	movw	r14, r24
    1258:	87 e0       	ldi	r24, 0x07	; 7
    125a:	e8 0e       	add	r14, r24
    125c:	f1 1c       	adc	r15, r1
    125e:	c0 e0       	ldi	r28, 0x00	; 0
    1260:	d0 e0       	ldi	r29, 0x00	; 0
    1262:	06 2f       	mov	r16, r22
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	b8 01       	movw	r22, r16
    1268:	0c 2e       	mov	r0, r28
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    126c:	75 95       	asr	r23
    126e:	67 95       	ror	r22
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <_ZN13LiquidCrystal10write4bitsEh+0x28>
    1274:	61 70       	andi	r22, 0x01	; 1
    1276:	f7 01       	movw	r30, r14
    1278:	81 91       	ld	r24, Z+
    127a:	7f 01       	movw	r14, r30
    127c:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    1280:	21 96       	adiw	r28, 0x01	; 1
    1282:	c4 30       	cpi	r28, 0x04	; 4
    1284:	d1 05       	cpc	r29, r1
    1286:	79 f7       	brne	.-34     	; 0x1266 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1288:	c6 01       	movw	r24, r12
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	0c 94 05 09 	jmp	0x120a	; 0x120a <_ZN13LiquidCrystal11pulseEnableEv>

0000129e <_ZN13LiquidCrystal10write8bitsEh>:
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	6c 01       	movw	r12, r24
    12b0:	7c 01       	movw	r14, r24
    12b2:	87 e0       	ldi	r24, 0x07	; 7
    12b4:	e8 0e       	add	r14, r24
    12b6:	f1 1c       	adc	r15, r1
    12b8:	c0 e0       	ldi	r28, 0x00	; 0
    12ba:	d0 e0       	ldi	r29, 0x00	; 0
    12bc:	06 2f       	mov	r16, r22
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	b8 01       	movw	r22, r16
    12c2:	0c 2e       	mov	r0, r28
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    12c6:	75 95       	asr	r23
    12c8:	67 95       	ror	r22
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    12ce:	61 70       	andi	r22, 0x01	; 1
    12d0:	f7 01       	movw	r30, r14
    12d2:	81 91       	ld	r24, Z+
    12d4:	7f 01       	movw	r14, r30
    12d6:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    12da:	21 96       	adiw	r28, 0x01	; 1
    12dc:	c8 30       	cpi	r28, 0x08	; 8
    12de:	d1 05       	cpc	r29, r1
    12e0:	79 f7       	brne	.-34     	; 0x12c0 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    12e2:	c6 01       	movw	r24, r12
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	0c 94 05 09 	jmp	0x120a	; 0x120a <_ZN13LiquidCrystal11pulseEnableEv>

000012f8 <_ZN13LiquidCrystal4sendEhh>:
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	ec 01       	movw	r28, r24
    1300:	16 2f       	mov	r17, r22
    1302:	64 2f       	mov	r22, r20
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	8f 3f       	cpi	r24, 0xFF	; 255
    130e:	19 f0       	breq	.+6      	; 0x1316 <_ZN13LiquidCrystal4sendEhh+0x1e>
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    1316:	8f 85       	ldd	r24, Y+15	; 0x0f
    1318:	61 2f       	mov	r22, r17
    131a:	84 ff       	sbrs	r24, 4
    131c:	06 c0       	rjmp	.+12     	; 0x132a <_ZN13LiquidCrystal4sendEhh+0x32>
    131e:	ce 01       	movw	r24, r28
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0c 94 4f 09 	jmp	0x129e	; 0x129e <_ZN13LiquidCrystal10write8bitsEh>
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	75 95       	asr	r23
    1330:	67 95       	ror	r22
    1332:	8a 95       	dec	r24
    1334:	e1 f7       	brne	.-8      	; 0x132e <_ZN13LiquidCrystal4sendEhh+0x36>
    1336:	ce 01       	movw	r24, r28
    1338:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN13LiquidCrystal10write4bitsEh>
    133c:	61 2f       	mov	r22, r17
    133e:	ce 01       	movw	r24, r28
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0c 94 22 09 	jmp	0x1244	; 0x1244 <_ZN13LiquidCrystal10write4bitsEh>

0000134a <_ZN13LiquidCrystal7commandEh>:
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <_ZN13LiquidCrystal4sendEhh>

00001350 <_ZN13LiquidCrystal5clearEv>:
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN13LiquidCrystal7commandEh>
    1356:	80 ed       	ldi	r24, 0xD0	; 208
    1358:	97 e0       	ldi	r25, 0x07	; 7
    135a:	0c 94 02 08 	jmp	0x1004	; 0x1004 <delayMicroseconds>

0000135e <_ZN13LiquidCrystal9setCursorEhh>:
    135e:	fc 01       	movw	r30, r24
    1360:	44 30       	cpi	r20, 0x04	; 4
    1362:	08 f0       	brcs	.+2      	; 0x1366 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    1364:	43 e0       	ldi	r20, 0x03	; 3
    1366:	83 89       	ldd	r24, Z+19	; 0x13
    1368:	48 17       	cp	r20, r24
    136a:	10 f0       	brcs	.+4      	; 0x1370 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    136c:	4f ef       	ldi	r20, 0xFF	; 255
    136e:	48 0f       	add	r20, r24
    1370:	df 01       	movw	r26, r30
    1372:	a4 0f       	add	r26, r20
    1374:	b1 1d       	adc	r27, r1
    1376:	54 96       	adiw	r26, 0x14	; 20
    1378:	9c 91       	ld	r25, X
    137a:	69 0f       	add	r22, r25
    137c:	60 68       	ori	r22, 0x80	; 128
    137e:	cf 01       	movw	r24, r30
    1380:	0c 94 a5 09 	jmp	0x134a	; 0x134a <_ZN13LiquidCrystal7commandEh>

00001384 <_ZN13LiquidCrystal7displayEv>:
    1384:	fc 01       	movw	r30, r24
    1386:	60 89       	ldd	r22, Z+16	; 0x10
    1388:	26 2f       	mov	r18, r22
    138a:	24 60       	ori	r18, 0x04	; 4
    138c:	20 8b       	std	Z+16, r18	; 0x10
    138e:	6c 60       	ori	r22, 0x0C	; 12
    1390:	0c 94 a5 09 	jmp	0x134a	; 0x134a <_ZN13LiquidCrystal7commandEh>

00001394 <_ZN13LiquidCrystal5beginEhhh>:
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	ec 01       	movw	r28, r24
    13a2:	42 30       	cpi	r20, 0x02	; 2
    13a4:	18 f0       	brcs	.+6      	; 0x13ac <_ZN13LiquidCrystal5beginEhhh+0x18>
    13a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a8:	88 60       	ori	r24, 0x08	; 8
    13aa:	8f 87       	std	Y+15, r24	; 0x0f
    13ac:	4b 8b       	std	Y+19, r20	; 0x13
    13ae:	1c 8a       	std	Y+20, r1	; 0x14
    13b0:	80 e4       	ldi	r24, 0x40	; 64
    13b2:	8d 8b       	std	Y+21, r24	; 0x15
    13b4:	6e 8b       	std	Y+22, r22	; 0x16
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	60 5c       	subi	r22, 0xC0	; 192
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	6f 8b       	std	Y+23, r22	; 0x17
    13be:	22 23       	and	r18, r18
    13c0:	29 f0       	breq	.+10     	; 0x13cc <_ZN13LiquidCrystal5beginEhhh+0x38>
    13c2:	41 30       	cpi	r20, 0x01	; 1
    13c4:	19 f4       	brne	.+6      	; 0x13cc <_ZN13LiquidCrystal5beginEhhh+0x38>
    13c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c8:	84 60       	ori	r24, 0x04	; 4
    13ca:	8f 87       	std	Y+15, r24	; 0x0f
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	8f 3f       	cpi	r24, 0xFF	; 255
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	8e 81       	ldd	r24, Y+6	; 0x06
    13e4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
    13e8:	7e 01       	movw	r14, r28
    13ea:	87 e0       	ldi	r24, 0x07	; 7
    13ec:	e8 0e       	add	r14, r24
    13ee:	f1 1c       	adc	r15, r1
    13f0:	00 e0       	ldi	r16, 0x00	; 0
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f6:	84 fd       	sbrc	r24, 4
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    13fa:	84 e0       	ldi	r24, 0x04	; 4
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <_ZN13LiquidCrystal5beginEhhh+0x70>
    1400:	88 e0       	ldi	r24, 0x08	; 8
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	08 17       	cp	r16, r24
    1406:	19 07       	cpc	r17, r25
    1408:	4c f4       	brge	.+18     	; 0x141c <_ZN13LiquidCrystal5beginEhhh+0x88>
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	f7 01       	movw	r30, r14
    140e:	81 91       	ld	r24, Z+
    1410:	7f 01       	movw	r14, r30
    1412:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
    1416:	0f 5f       	subi	r16, 0xFF	; 255
    1418:	1f 4f       	sbci	r17, 0xFF	; 255
    141a:	ec cf       	rjmp	.-40     	; 0x13f4 <_ZN13LiquidCrystal5beginEhhh+0x60>
    141c:	80 e5       	ldi	r24, 0x50	; 80
    141e:	93 ec       	ldi	r25, 0xC3	; 195
    1420:	0e 94 02 08 	call	0x1004	; 0x1004 <delayMicroseconds>
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	8e 81       	ldd	r24, Y+6	; 0x06
    1430:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	8f 3f       	cpi	r24, 0xFF	; 255
    1438:	19 f0       	breq	.+6      	; 0x1440 <_ZN13LiquidCrystal5beginEhhh+0xac>
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
    1440:	6f 85       	ldd	r22, Y+15	; 0x0f
    1442:	64 fd       	sbrc	r22, 4
    1444:	1d c0       	rjmp	.+58     	; 0x1480 <_ZN13LiquidCrystal5beginEhhh+0xec>
    1446:	63 e0       	ldi	r22, 0x03	; 3
    1448:	ce 01       	movw	r24, r28
    144a:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN13LiquidCrystal10write4bitsEh>
    144e:	84 e9       	ldi	r24, 0x94	; 148
    1450:	91 e1       	ldi	r25, 0x11	; 17
    1452:	0e 94 02 08 	call	0x1004	; 0x1004 <delayMicroseconds>
    1456:	63 e0       	ldi	r22, 0x03	; 3
    1458:	ce 01       	movw	r24, r28
    145a:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN13LiquidCrystal10write4bitsEh>
    145e:	84 e9       	ldi	r24, 0x94	; 148
    1460:	91 e1       	ldi	r25, 0x11	; 17
    1462:	0e 94 02 08 	call	0x1004	; 0x1004 <delayMicroseconds>
    1466:	63 e0       	ldi	r22, 0x03	; 3
    1468:	ce 01       	movw	r24, r28
    146a:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN13LiquidCrystal10write4bitsEh>
    146e:	86 e9       	ldi	r24, 0x96	; 150
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 02 08 	call	0x1004	; 0x1004 <delayMicroseconds>
    1476:	62 e0       	ldi	r22, 0x02	; 2
    1478:	ce 01       	movw	r24, r28
    147a:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN13LiquidCrystal10write4bitsEh>
    147e:	16 c0       	rjmp	.+44     	; 0x14ac <_ZN13LiquidCrystal5beginEhhh+0x118>
    1480:	60 62       	ori	r22, 0x20	; 32
    1482:	ce 01       	movw	r24, r28
    1484:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN13LiquidCrystal7commandEh>
    1488:	84 e9       	ldi	r24, 0x94	; 148
    148a:	91 e1       	ldi	r25, 0x11	; 17
    148c:	0e 94 02 08 	call	0x1004	; 0x1004 <delayMicroseconds>
    1490:	6f 85       	ldd	r22, Y+15	; 0x0f
    1492:	60 62       	ori	r22, 0x20	; 32
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN13LiquidCrystal7commandEh>
    149a:	86 e9       	ldi	r24, 0x96	; 150
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 02 08 	call	0x1004	; 0x1004 <delayMicroseconds>
    14a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    14a4:	60 62       	ori	r22, 0x20	; 32
    14a6:	ce 01       	movw	r24, r28
    14a8:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN13LiquidCrystal7commandEh>
    14ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    14ae:	60 62       	ori	r22, 0x20	; 32
    14b0:	ce 01       	movw	r24, r28
    14b2:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN13LiquidCrystal7commandEh>
    14b6:	84 e0       	ldi	r24, 0x04	; 4
    14b8:	88 8b       	std	Y+16, r24	; 0x10
    14ba:	ce 01       	movw	r24, r28
    14bc:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN13LiquidCrystal7displayEv>
    14c0:	ce 01       	movw	r24, r28
    14c2:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN13LiquidCrystal5clearEv>
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	89 8b       	std	Y+17, r24	; 0x11
    14ca:	66 e0       	ldi	r22, 0x06	; 6
    14cc:	ce 01       	movw	r24, r28
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	0c 94 a5 09 	jmp	0x134a	; 0x134a <_ZN13LiquidCrystal7commandEh>

000014de <_ZN13LiquidCrystalC1Ehhhhhh>:
    14de:	cf 92       	push	r12
    14e0:	ef 92       	push	r14
    14e2:	0f 93       	push	r16
    14e4:	fc 01       	movw	r30, r24
    14e6:	13 82       	std	Z+3, r1	; 0x03
    14e8:	12 82       	std	Z+2, r1	; 0x02
    14ea:	8c e2       	ldi	r24, 0x2C	; 44
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	64 83       	std	Z+4, r22	; 0x04
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	85 83       	std	Z+5, r24	; 0x05
    14f8:	46 83       	std	Z+6, r20	; 0x06
    14fa:	27 83       	std	Z+7, r18	; 0x07
    14fc:	00 87       	std	Z+8, r16	; 0x08
    14fe:	e1 86       	std	Z+9, r14	; 0x09
    1500:	c2 86       	std	Z+10, r12	; 0x0a
    1502:	13 86       	std	Z+11, r1	; 0x0b
    1504:	14 86       	std	Z+12, r1	; 0x0c
    1506:	15 86       	std	Z+13, r1	; 0x0d
    1508:	16 86       	std	Z+14, r1	; 0x0e
    150a:	17 86       	std	Z+15, r1	; 0x0f
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	60 e1       	ldi	r22, 0x10	; 16
    1512:	cf 01       	movw	r24, r30
    1514:	0f 91       	pop	r16
    1516:	ef 90       	pop	r14
    1518:	cf 90       	pop	r12
    151a:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <_ZN13LiquidCrystal5beginEhhh>

0000151e <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	08 95       	ret

0000152a <_ZN6RotaryC1Ecc>:
#endif

/*
 * Constructor. Each arg is the pin number for each encoder contact.
 */
Rotary::Rotary(char _pin1, char _pin2) {
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	ec 01       	movw	r28, r24
    1530:	86 2f       	mov	r24, r22
  // Assign variables.
  pin1 = _pin1;
    1532:	69 83       	std	Y+1, r22	; 0x01
  pin2 = _pin2;
    1534:	4a 83       	std	Y+2, r20	; 0x02
  // Set pins to input.
  pinMode(pin1, INPUT);
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
  pinMode(pin2, INPUT);
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	0e 94 71 08 	call	0x10e2	; 0x10e2 <pinMode>
#ifdef ENABLE_PULLUPS
  digitalWrite(pin1, HIGH);
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
  digitalWrite(pin2, HIGH);
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	0e 94 ad 08 	call	0x115a	; 0x115a <digitalWrite>
#endif
  // Initialise state.
  state = R_START;
    1554:	18 82       	st	Y, r1
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <_ZN6Rotary7processEv>:

unsigned char Rotary::process() {
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ec 01       	movw	r28, r24
  // Grab state of input pins.
  unsigned char pinstate = (digitalRead(pin2) << 1) | digitalRead(pin1);
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
    156c:	8c 01       	movw	r16, r24
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <digitalRead>
  // Determine new state from the pins and state table.
  state = ttable[state & 0xf][pinstate];
    1574:	e8 81       	ld	r30, Y
    1576:	ef 70       	andi	r30, 0x0F	; 15
    1578:	00 0f       	add	r16, r16
    157a:	11 1f       	adc	r17, r17
    157c:	80 2b       	or	r24, r16
    157e:	94 e0       	ldi	r25, 0x04	; 4
    1580:	e9 9f       	mul	r30, r25
    1582:	f0 01       	movw	r30, r0
    1584:	11 24       	eor	r1, r1
    1586:	ec 5c       	subi	r30, 0xCC	; 204
    1588:	fe 4f       	sbci	r31, 0xFE	; 254
    158a:	e8 0f       	add	r30, r24
    158c:	f1 1d       	adc	r31, r1
    158e:	80 81       	ld	r24, Z
    1590:	88 83       	st	Y, r24
  // Return emit bits, ie the generated event.
  return state & 0x30;
}
    1592:	80 73       	andi	r24, 0x30	; 48
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    159e:	08 95       	ret

000015a0 <__fixunssfsi>:
    15a0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__fp_splitA>
    15a4:	88 f0       	brcs	.+34     	; 0x15c8 <__fixunssfsi+0x28>
    15a6:	9f 57       	subi	r25, 0x7F	; 127
    15a8:	98 f0       	brcs	.+38     	; 0x15d0 <__fixunssfsi+0x30>
    15aa:	b9 2f       	mov	r27, r25
    15ac:	99 27       	eor	r25, r25
    15ae:	b7 51       	subi	r27, 0x17	; 23
    15b0:	b0 f0       	brcs	.+44     	; 0x15de <__fixunssfsi+0x3e>
    15b2:	e1 f0       	breq	.+56     	; 0x15ec <__fixunssfsi+0x4c>
    15b4:	66 0f       	add	r22, r22
    15b6:	77 1f       	adc	r23, r23
    15b8:	88 1f       	adc	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	1a f0       	brmi	.+6      	; 0x15c4 <__fixunssfsi+0x24>
    15be:	ba 95       	dec	r27
    15c0:	c9 f7       	brne	.-14     	; 0x15b4 <__fixunssfsi+0x14>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <__fixunssfsi+0x4c>
    15c4:	b1 30       	cpi	r27, 0x01	; 1
    15c6:	91 f0       	breq	.+36     	; 0x15ec <__fixunssfsi+0x4c>
    15c8:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_zero>
    15cc:	b1 e0       	ldi	r27, 0x01	; 1
    15ce:	08 95       	ret
    15d0:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_zero>
    15d4:	67 2f       	mov	r22, r23
    15d6:	78 2f       	mov	r23, r24
    15d8:	88 27       	eor	r24, r24
    15da:	b8 5f       	subi	r27, 0xF8	; 248
    15dc:	39 f0       	breq	.+14     	; 0x15ec <__fixunssfsi+0x4c>
    15de:	b9 3f       	cpi	r27, 0xF9	; 249
    15e0:	cc f3       	brlt	.-14     	; 0x15d4 <__fixunssfsi+0x34>
    15e2:	86 95       	lsr	r24
    15e4:	77 95       	ror	r23
    15e6:	67 95       	ror	r22
    15e8:	b3 95       	inc	r27
    15ea:	d9 f7       	brne	.-10     	; 0x15e2 <__fixunssfsi+0x42>
    15ec:	3e f4       	brtc	.+14     	; 0x15fc <__fixunssfsi+0x5c>
    15ee:	90 95       	com	r25
    15f0:	80 95       	com	r24
    15f2:	70 95       	com	r23
    15f4:	61 95       	neg	r22
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	8f 4f       	sbci	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	08 95       	ret

000015fe <__unordsf2>:
    15fe:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_cmp>
    1602:	88 0b       	sbc	r24, r24
    1604:	99 0b       	sbc	r25, r25
    1606:	08 95       	ret

00001608 <__udivmodsi4>:
    1608:	a1 e2       	ldi	r26, 0x21	; 33
    160a:	1a 2e       	mov	r1, r26
    160c:	aa 1b       	sub	r26, r26
    160e:	bb 1b       	sub	r27, r27
    1610:	fd 01       	movw	r30, r26
    1612:	0d c0       	rjmp	.+26     	; 0x162e <__udivmodsi4_ep>

00001614 <__udivmodsi4_loop>:
    1614:	aa 1f       	adc	r26, r26
    1616:	bb 1f       	adc	r27, r27
    1618:	ee 1f       	adc	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	a2 17       	cp	r26, r18
    161e:	b3 07       	cpc	r27, r19
    1620:	e4 07       	cpc	r30, r20
    1622:	f5 07       	cpc	r31, r21
    1624:	20 f0       	brcs	.+8      	; 0x162e <__udivmodsi4_ep>
    1626:	a2 1b       	sub	r26, r18
    1628:	b3 0b       	sbc	r27, r19
    162a:	e4 0b       	sbc	r30, r20
    162c:	f5 0b       	sbc	r31, r21

0000162e <__udivmodsi4_ep>:
    162e:	66 1f       	adc	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	1a 94       	dec	r1
    1638:	69 f7       	brne	.-38     	; 0x1614 <__udivmodsi4_loop>
    163a:	60 95       	com	r22
    163c:	70 95       	com	r23
    163e:	80 95       	com	r24
    1640:	90 95       	com	r25
    1642:	9b 01       	movw	r18, r22
    1644:	ac 01       	movw	r20, r24
    1646:	bd 01       	movw	r22, r26
    1648:	cf 01       	movw	r24, r30
    164a:	08 95       	ret

0000164c <__divmodsi4>:
    164c:	05 2e       	mov	r0, r21
    164e:	97 fb       	bst	r25, 7
    1650:	1e f4       	brtc	.+6      	; 0x1658 <__divmodsi4+0xc>
    1652:	00 94       	com	r0
    1654:	0e 94 3d 0b 	call	0x167a	; 0x167a <__negsi2>
    1658:	57 fd       	sbrc	r21, 7
    165a:	07 d0       	rcall	.+14     	; 0x166a <__divmodsi4_neg2>
    165c:	0e 94 04 0b 	call	0x1608	; 0x1608 <__udivmodsi4>
    1660:	07 fc       	sbrc	r0, 7
    1662:	03 d0       	rcall	.+6      	; 0x166a <__divmodsi4_neg2>
    1664:	4e f4       	brtc	.+18     	; 0x1678 <__divmodsi4_exit>
    1666:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__negsi2>

0000166a <__divmodsi4_neg2>:
    166a:	50 95       	com	r21
    166c:	40 95       	com	r20
    166e:	30 95       	com	r19
    1670:	21 95       	neg	r18
    1672:	3f 4f       	sbci	r19, 0xFF	; 255
    1674:	4f 4f       	sbci	r20, 0xFF	; 255
    1676:	5f 4f       	sbci	r21, 0xFF	; 255

00001678 <__divmodsi4_exit>:
    1678:	08 95       	ret

0000167a <__negsi2>:
    167a:	90 95       	com	r25
    167c:	80 95       	com	r24
    167e:	70 95       	com	r23
    1680:	61 95       	neg	r22
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	8f 4f       	sbci	r24, 0xFF	; 255
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	08 95       	ret

0000168a <__tablejump2__>:
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	05 90       	lpm	r0, Z+
    1690:	f4 91       	lpm	r31, Z
    1692:	e0 2d       	mov	r30, r0
    1694:	09 94       	ijmp

00001696 <_exit>:
    1696:	f8 94       	cli

00001698 <__stop_program>:
    1698:	ff cf       	rjmp	.-2      	; 0x1698 <__stop_program>
